C     This File is Automatically generated by ALOHA 
C     The process calculated in this file is: 
C     4*Epsilon(1,2,3,-2)*P(-2,3)*P(-1,1)*P(-1,2) + 4*Epsilon(1,2,3,-2)
C     *P(-2,2)*P(-1,1)*P(-1,3) + 4*Epsilon(1,2,3,-2)*P(-2,1)*P(-1,2)*P(
C     -1,3) - 2*Epsilon(2,3,-1,-2)*P(-2,3)*P(-1,1)*P(1,2) + 2*Epsilon(2
C     ,3,-1,-2)*P(-2,1)*P(-1,3)*P(1,2) - 2*Epsilon(2,3,-1,-2)*P(-2,2)*P
C     (-1,1)*P(1,3) + 2*Epsilon(2,3,-1,-2)*P(-2,1)*P(-1,2)*P(1,3) +
C      2*Epsilon(1,3,-1,-2)*P(-2,3)*P(-1,2)*P(2,1) - 2*Epsilon(1,3,-1,-
C     2)*P(-2,2)*P(-1,3)*P(2,1) - 2*Epsilon(1,3,-1,-2)*P(-2,2)*P(-1,1)*
C     P(2,3) + 2*Epsilon(1,3,-1,-2)*P(-2,1)*P(-1,2)*P(2,3) + 2*Epsilon(
C     1,2,-1,-2)*P(-2,3)*P(-1,2)*P(3,1) - 2*Epsilon(1,2,-1,-2)*P(-2,2)*
C     P(-1,3)*P(3,1) + 2*Epsilon(1,2,-1,-2)*P(-2,3)*P(-1,1)*P(3,2) -
C      2*Epsilon(1,2,-1,-2)*P(-2,1)*P(-1,3)*P(3,2) + Epsilon(3,-1,-2,-3
C     )*P(-3,3)*P(-2,2)*P(-1,1)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,
C     3)*P(-2,1)*P(-1,2)*Metric(1,2) + Epsilon(3,-1,-2,-3)*P(-3,2)*P(-2
C     ,1)*P(-1,3)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-
C     1,3)*Metric(1,2) - Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Me
C     tric(1,3) - Epsilon(2,-1,-2,-3)*P(-3,3)*P(-2,1)*P(-1,2)*Metric(1,
C     3) + Epsilon(2,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(1,3) +
C      Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,1)*P(-1,3)*Metric(1,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,3)*P(-2,2)*P(-1,1)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Metric(2,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-1,3)*Metric(2,3)
C     
      SUBROUTINE VVV10P0_1(V2, V3, COUP, M1, W1,V1)
      IMPLICIT NONE
      COMPLEX*16 CI
      PARAMETER (CI=(0D0,1D0))
      COMPLEX*16 TMP39
      COMPLEX*16 TMP36
      REAL*8 P3(0:3)
      REAL*8 W1
      COMPLEX*16 TMP14
      COMPLEX*16 COUP
      COMPLEX*16 V3(*)
      COMPLEX*16 TMP37
      REAL*8 M1
      REAL*8 P2(0:3)
      COMPLEX*16 TMP10
      COMPLEX*16 TMP20
      COMPLEX*16 TMP6
      COMPLEX*16 TMP33
      COMPLEX*16 TMP24
      COMPLEX*16 V2(*)
      COMPLEX*16 TMP34
      REAL*8 P1(0:3)
      COMPLEX*16 TMP30
      COMPLEX*16 TMP16
      COMPLEX*16 DENOM
      COMPLEX*16 TMP27
      COMPLEX*16 TMP11
      COMPLEX*16 V1(6)
      COMPLEX*16 TMP13
      COMPLEX*16 TMP38
      COMPLEX*16 TMP31
      COMPLEX*16 TMP32
      COMPLEX*16 TMP17
      COMPLEX*16 TMP8
      P2(0) = DBLE(V2(1))
      P2(1) = DBLE(V2(2))
      P2(2) = DIMAG(V2(2))
      P2(3) = DIMAG(V2(1))
      P3(0) = DBLE(V3(1))
      P3(1) = DBLE(V3(2))
      P3(2) = DIMAG(V3(2))
      P3(3) = DIMAG(V3(1))
      V1(1) = +V2(1)+V3(1)
      V1(2) = +V2(2)+V3(2)
      P1(0) = -DBLE(V1(1))
      P1(1) = -DBLE(V1(2))
      P1(2) = -DIMAG(V1(2))
      P1(3) = -DIMAG(V1(1))
      TMP24 = (V3(3)*P1(0)-V3(4)*P1(1)-V3(5)*P1(2)-V3(6)*P1(3))
      TMP27 = (V3(3)*P2(0)-V3(4)*P2(1)-V3(5)*P2(2)-V3(6)*P2(3))
      TMP20 = (P3(0)*V2(3)-P3(1)*V2(4)-P3(2)*V2(5)-P3(3)*V2(6))
      TMP6 = (P1(0)*P2(0)-P1(1)*P2(1)-P1(2)*P2(2)-P1(3)*P2(3))
      TMP37 = -1D0*(P1(0)*(P2(1)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+P2(3)*(P3(1)*V2(5)-P3(2)*V2(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)*(P3(0)*V2(6)
     $ -P3(3)*V2(3))+P2(3)*(P3(2)*V2(3)-P3(0)*V2(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+(P2(1)*(P3(3)*V2(3)-P3(0)*V2(6))
     $ +P2(3)*(P3(0)*V2(4)-P3(1)*V2(3))))+P1(3)*(P2(0)*(P3(2)*V2(4)
     $ -P3(1)*V2(5))+(P2(1)*(P3(0)*V2(5)-P3(2)*V2(3))+P2(2)*(P3(1)
     $ *V2(3)-P3(0)*V2(4)))))))
      TMP31 = -1D0*(P1(0)*(P2(1)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+P2(3)*(V3(4)*P3(2)-V3(5)*P3(1))))
     $ +(P1(1)*(P2(0)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)*(V3(3)*P3(3)
     $ -V3(6)*P3(0))+P2(3)*(V3(5)*P3(0)-V3(3)*P3(2))))+(P1(2)*(P2(0)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+(P2(1)*(V3(6)*P3(0)-V3(3)*P3(3))
     $ +P2(3)*(V3(3)*P3(1)-V3(4)*P3(0))))+P1(3)*(P2(0)*(V3(5)*P3(1)
     $ -V3(4)*P3(2))+(P2(1)*(V3(3)*P3(2)-V3(5)*P3(0))+P2(2)*(V3(4)
     $ *P3(0)-V3(3)*P3(1)))))))
      TMP36 = -1D0*(P1(0)*(P2(1)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+P2(3)*(P3(2)*V2(4)-P3(1)*V2(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)*(P3(3)*V2(3)
     $ -P3(0)*V2(6))+P2(3)*(P3(0)*V2(5)-P3(2)*V2(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+(P2(1)*(P3(0)*V2(6)-P3(3)*V2(3))
     $ +P2(3)*(P3(1)*V2(3)-P3(0)*V2(4))))+P1(3)*(P2(0)*(P3(1)*V2(5)
     $ -P3(2)*V2(4))+(P2(1)*(P3(2)*V2(3)-P3(0)*V2(5))+P2(2)*(P3(0)
     $ *V2(4)-P3(1)*V2(3)))))))
      TMP39 = (V3(3)*V2(3)-V3(4)*V2(4)-V3(5)*V2(5)-V3(6)*V2(6))
      TMP38 = -1D0*(P1(0)*(P2(1)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+P2(3)*(P3(1)*V2(5)-P3(2)*V2(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)*(P3(0)*V2(6)
     $ -P3(3)*V2(3))+P2(3)*(P3(2)*V2(3)-P3(0)*V2(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+(P2(1)*(P3(3)*V2(3)-P3(0)*V2(6))
     $ +P2(3)*(P3(0)*V2(4)-P3(1)*V2(3))))+P1(3)*(P2(0)*(P3(2)*V2(4)
     $ -P3(1)*V2(5))+(P2(1)*(P3(0)*V2(5)-P3(2)*V2(3))+P2(2)*(P3(1)
     $ *V2(3)-P3(0)*V2(4)))))))
      TMP30 = -1D0*(P1(0)*(P2(1)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+P2(3)*(V3(5)*P3(1)-V3(4)*P3(2))))
     $ +(P1(1)*(P2(0)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)*(V3(6)*P3(0)
     $ -V3(3)*P3(3))+P2(3)*(V3(3)*P3(2)-V3(5)*P3(0))))+(P1(2)*(P2(0)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+(P2(1)*(V3(3)*P3(3)-V3(6)*P3(0))
     $ +P2(3)*(V3(4)*P3(0)-V3(3)*P3(1))))+P1(3)*(P2(0)*(V3(4)*P3(2)
     $ -V3(5)*P3(1))+(P2(1)*(V3(5)*P3(0)-V3(3)*P3(2))+P2(2)*(V3(3)
     $ *P3(1)-V3(4)*P3(0)))))))
      TMP8 = (P1(0)*P3(0)-P1(1)*P3(1)-P1(2)*P3(2)-P1(3)*P3(3))
      TMP14 = -1D0*(P1(0)*(P2(1)*(V3(5)*V2(6)-V3(6)*V2(5))+(P2(2)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+P2(3)*(V3(4)*V2(5)-V3(5)*V2(4))))
     $ +(P1(1)*(P2(0)*(V3(6)*V2(5)-V3(5)*V2(6))+(P2(2)*(V3(3)*V2(6)
     $ -V3(6)*V2(3))+P2(3)*(V3(5)*V2(3)-V3(3)*V2(5))))+(P1(2)*(P2(0)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+(P2(1)*(V3(6)*V2(3)-V3(3)*V2(6))
     $ +P2(3)*(V3(3)*V2(4)-V3(4)*V2(3))))+P1(3)*(P2(0)*(V3(5)*V2(4)
     $ -V3(4)*V2(5))+(P2(1)*(V3(3)*V2(5)-V3(5)*V2(3))+P2(2)*(V3(4)
     $ *V2(3)-V3(3)*V2(4)))))))
      TMP33 = -1D0*(P1(0)*(P2(1)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+P2(3)*(V3(4)*P3(2)-V3(5)*P3(1))))
     $ +(P1(1)*(P2(0)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)*(V3(3)*P3(3)
     $ -V3(6)*P3(0))+P2(3)*(V3(5)*P3(0)-V3(3)*P3(2))))+(P1(2)*(P2(0)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+(P2(1)*(V3(6)*P3(0)-V3(3)*P3(3))
     $ +P2(3)*(V3(3)*P3(1)-V3(4)*P3(0))))+P1(3)*(P2(0)*(V3(5)*P3(1)
     $ -V3(4)*P3(2))+(P2(1)*(V3(3)*P3(2)-V3(5)*P3(0))+P2(2)*(V3(4)
     $ *P3(0)-V3(3)*P3(1)))))))
      TMP32 = -1D0*(P1(0)*(P2(1)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+P2(3)*(V3(5)*P3(1)-V3(4)*P3(2))))
     $ +(P1(1)*(P2(0)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)*(V3(6)*P3(0)
     $ -V3(3)*P3(3))+P2(3)*(V3(3)*P3(2)-V3(5)*P3(0))))+(P1(2)*(P2(0)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+(P2(1)*(V3(3)*P3(3)-V3(6)*P3(0))
     $ +P2(3)*(V3(4)*P3(0)-V3(3)*P3(1))))+P1(3)*(P2(0)*(V3(4)*P3(2)
     $ -V3(5)*P3(1))+(P2(1)*(V3(5)*P3(0)-V3(3)*P3(2))+P2(2)*(V3(3)
     $ *P3(1)-V3(4)*P3(0)))))))
      TMP17 = (P1(0)*V2(3)-P1(1)*V2(4)-P1(2)*V2(5)-P1(3)*V2(6))
      TMP16 = -1D0*(P1(0)*(P2(1)*(V3(6)*V2(5)-V3(5)*V2(6))+(P2(2)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+P2(3)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P1(1)*(P2(0)*(V3(5)*V2(6)-V3(6)*V2(5))+(P2(2)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+P2(3)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P1(2)*(P2(0)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(P2(1)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +P2(3)*(V3(4)*V2(3)-V3(3)*V2(4))))+P1(3)*(P2(0)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(P2(1)*(V3(5)*V2(3)-V3(3)*V2(5))+P2(2)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP11 = -1D0*(P1(0)*(P3(1)*(V3(5)*V2(6)-V3(6)*V2(5))+(P3(2)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+P3(3)*(V3(4)*V2(5)-V3(5)*V2(4))))
     $ +(P1(1)*(P3(0)*(V3(6)*V2(5)-V3(5)*V2(6))+(P3(2)*(V3(3)*V2(6)
     $ -V3(6)*V2(3))+P3(3)*(V3(5)*V2(3)-V3(3)*V2(5))))+(P1(2)*(P3(0)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+(P3(1)*(V3(6)*V2(3)-V3(3)*V2(6))
     $ +P3(3)*(V3(3)*V2(4)-V3(4)*V2(3))))+P1(3)*(P3(0)*(V3(5)*V2(4)
     $ -V3(4)*V2(5))+(P3(1)*(V3(3)*V2(5)-V3(5)*V2(3))+P3(2)*(V3(4)
     $ *V2(3)-V3(3)*V2(4)))))))
      TMP10 = (P2(0)*P3(0)-P2(1)*P3(1)-P2(2)*P3(2)-P2(3)*P3(3))
      TMP13 = -1D0*(P1(0)*(P3(1)*(V3(6)*V2(5)-V3(5)*V2(6))+(P3(2)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+P3(3)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P1(1)*(P3(0)*(V3(5)*V2(6)-V3(6)*V2(5))+(P3(2)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+P3(3)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P1(2)*(P3(0)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(P3(1)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +P3(3)*(V3(4)*V2(3)-V3(3)*V2(4))))+P1(3)*(P3(0)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(P3(1)*(V3(5)*V2(3)-V3(3)*V2(5))+P3(2)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP34 = -1D0*(P1(0)*(P2(1)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+P2(3)*(P3(2)*V2(4)-P3(1)*V2(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)*(P3(3)*V2(3)
     $ -P3(0)*V2(6))+P2(3)*(P3(0)*V2(5)-P3(2)*V2(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+(P2(1)*(P3(0)*V2(6)-P3(3)*V2(3))
     $ +P2(3)*(P3(1)*V2(3)-P3(0)*V2(4))))+P1(3)*(P2(0)*(P3(1)*V2(5)
     $ -P3(2)*V2(4))+(P2(1)*(P3(2)*V2(3)-P3(0)*V2(5))+P2(2)*(P3(0)
     $ *V2(4)-P3(1)*V2(3)))))))
      DENOM = COUP/(P1(0)**2-P1(1)**2-P1(2)**2-P1(3)**2 - M1 * (M1 
     $ -CI* W1))
      V1(3)= DENOM*CI*(P2(1)*(P3(2)*-4D0*(V3(6)*TMP17+V2(6)*TMP24
     $ +P1(3)*TMP39)+(P3(3)*4D0*(V3(5)*TMP17+V2(5)*TMP24+P1(2)*TMP39)
     $ +(TMP20*4D0*(V3(5)*P1(3)-V3(6)*P1(2))+4D0*(TMP8*(V3(5)*V2(6)
     $ -V3(6)*V2(5))))))+(P2(2)*(P3(1)*4D0*(V3(6)*TMP17+V2(6)*TMP24
     $ +P1(3)*TMP39)+(P3(3)*-4D0*(V3(4)*TMP17+V2(4)*TMP24+P1(1)*TMP39)
     $ +(TMP20*4D0*(V3(6)*P1(1)-V3(4)*P1(3))+4D0*(TMP8*(V3(6)*V2(4)
     $ -V3(4)*V2(6))))))+(P2(3)*(P3(1)*-4D0*(V3(5)*TMP17+V2(5)*TMP24
     $ +P1(2)*TMP39)+(P3(2)*4D0*(V3(4)*TMP17+V2(4)*TMP24+P1(1)*TMP39)
     $ +(TMP20*4D0*(V3(4)*P1(2)-V3(5)*P1(1))+4D0*(TMP8*(V3(4)*V2(5)
     $ -V3(5)*V2(4))))))+(TMP10*(P1(1)*4D0*(V3(5)*V2(6)-V3(6)*V2(5))
     $ +(P1(2)*4D0*(V3(6)*V2(4)-V3(4)*V2(6))+4D0*(P1(3)*(V3(4)*V2(5)
     $ -V3(5)*V2(4)))))+(TMP27*(P1(1)*4D0*(P3(3)*V2(5)-P3(2)*V2(6))
     $ +(P1(2)*4D0*(P3(1)*V2(6)-P3(3)*V2(4))+4D0*(P1(3)*(P3(2)*V2(4)
     $ -P3(1)*V2(5)))))+(TMP6*(P3(1)*4D0*(V3(5)*V2(6)-V3(6)*V2(5))
     $ +(P3(2)*4D0*(V3(6)*V2(4)-V3(4)*V2(6))+4D0*(P3(3)*(V3(4)*V2(5)
     $ -V3(5)*V2(4)))))+(V2(3)*(TMP31+TMP33-TMP30-TMP32)+(V3(3)*(TMP34
     $ +TMP36-TMP37-TMP38)+(P2(0)*2D0*(TMP11-TMP13)+2D0*(P3(0)*(TMP14
     $ -TMP16)))))))))))
      V1(4)= DENOM*-CI*(P2(0)*(P3(2)*4D0*(V3(6)*TMP17+V2(6)*TMP24
     $ +P1(3)*TMP39)+(P3(3)*-4D0*(V3(5)*TMP17+V2(5)*TMP24+P1(2)*TMP39)
     $ +(TMP20*4D0*(V3(6)*P1(2)-V3(5)*P1(3))+4D0*(TMP8*(V3(6)*V2(5)
     $ -V3(5)*V2(6))))))+(P2(2)*(P3(0)*-4D0*(V3(6)*TMP17+V2(6)*TMP24
     $ +P1(3)*TMP39)+(P3(3)*4D0*(V3(3)*TMP17+V2(3)*TMP24+P1(0)*TMP39)
     $ +(TMP20*4D0*(V3(3)*P1(3)-V3(6)*P1(0))+4D0*(TMP8*(V3(3)*V2(6)
     $ -V3(6)*V2(3))))))+(P2(3)*(P3(0)*4D0*(V3(5)*TMP17+V2(5)*TMP24
     $ +P1(2)*TMP39)+(P3(2)*-4D0*(V3(3)*TMP17+V2(3)*TMP24+P1(0)*TMP39)
     $ +(TMP20*4D0*(V3(5)*P1(0)-V3(3)*P1(2))+4D0*(TMP8*(V3(5)*V2(3)
     $ -V3(3)*V2(5))))))+(TMP10*(P1(0)*4D0*(V3(6)*V2(5)-V3(5)*V2(6))
     $ +(P1(2)*4D0*(V3(3)*V2(6)-V3(6)*V2(3))+4D0*(P1(3)*(V3(5)*V2(3)
     $ -V3(3)*V2(5)))))+(TMP27*(P1(0)*4D0*(P3(2)*V2(6)-P3(3)*V2(5))
     $ +(P1(2)*4D0*(P3(3)*V2(3)-P3(0)*V2(6))+4D0*(P1(3)*(P3(0)*V2(5)
     $ -P3(2)*V2(3)))))+(TMP6*(P3(0)*4D0*(V3(6)*V2(5)-V3(5)*V2(6))
     $ +(P3(2)*4D0*(V3(3)*V2(6)-V3(6)*V2(3))+4D0*(P3(3)*(V3(5)*V2(3)
     $ -V3(3)*V2(5)))))+(V2(4)*(TMP30+TMP32-TMP31-TMP33)+(V3(4)*(TMP37
     $ +TMP38-TMP34-TMP36)+(P2(1)*2D0*(TMP13-TMP11)+2D0*(P3(1)*(TMP16
     $ -TMP14)))))))))))
      V1(5)= DENOM*-CI*(P2(0)*(P3(1)*-4D0*(V3(6)*TMP17+V2(6)*TMP24
     $ +P1(3)*TMP39)+(P3(3)*4D0*(V3(4)*TMP17+V2(4)*TMP24+P1(1)*TMP39)
     $ +(TMP20*4D0*(V3(4)*P1(3)-V3(6)*P1(1))+4D0*(TMP8*(V3(4)*V2(6)
     $ -V3(6)*V2(4))))))+(P2(1)*(P3(0)*4D0*(V3(6)*TMP17+V2(6)*TMP24
     $ +P1(3)*TMP39)+(P3(3)*-4D0*(V3(3)*TMP17+V2(3)*TMP24+P1(0)*TMP39)
     $ +(TMP20*4D0*(V3(6)*P1(0)-V3(3)*P1(3))+4D0*(TMP8*(V3(6)*V2(3)
     $ -V3(3)*V2(6))))))+(P2(3)*(P3(0)*-4D0*(V3(4)*TMP17+V2(4)*TMP24
     $ +P1(1)*TMP39)+(P3(1)*4D0*(V3(3)*TMP17+V2(3)*TMP24+P1(0)*TMP39)
     $ +(TMP20*4D0*(V3(3)*P1(1)-V3(4)*P1(0))+4D0*(TMP8*(V3(3)*V2(4)
     $ -V3(4)*V2(3))))))+(TMP10*(P1(0)*4D0*(V3(4)*V2(6)-V3(6)*V2(4))
     $ +(P1(1)*4D0*(V3(6)*V2(3)-V3(3)*V2(6))+4D0*(P1(3)*(V3(3)*V2(4)
     $ -V3(4)*V2(3)))))+(TMP27*(P1(0)*4D0*(P3(3)*V2(4)-P3(1)*V2(6))
     $ +(P1(1)*4D0*(P3(0)*V2(6)-P3(3)*V2(3))+4D0*(P1(3)*(P3(1)*V2(3)
     $ -P3(0)*V2(4)))))+(TMP6*(P3(0)*4D0*(V3(4)*V2(6)-V3(6)*V2(4))
     $ +(P3(1)*4D0*(V3(6)*V2(3)-V3(3)*V2(6))+4D0*(P3(3)*(V3(3)*V2(4)
     $ -V3(4)*V2(3)))))+(V2(5)*(TMP30+TMP32-TMP31-TMP33)+(V3(5)*(TMP37
     $ +TMP38-TMP34-TMP36)+(P2(2)*2D0*(TMP13-TMP11)+2D0*(P3(2)*(TMP16
     $ -TMP14)))))))))))
      V1(6)= DENOM*-CI*(P2(0)*(P3(1)*4D0*(V3(5)*TMP17+V2(5)*TMP24
     $ +P1(2)*TMP39)+(P3(2)*-4D0*(V3(4)*TMP17+V2(4)*TMP24+P1(1)*TMP39)
     $ +(TMP20*4D0*(V3(5)*P1(1)-V3(4)*P1(2))+4D0*(TMP8*(V3(5)*V2(4)
     $ -V3(4)*V2(5))))))+(P2(1)*(P3(0)*-4D0*(V3(5)*TMP17+V2(5)*TMP24
     $ +P1(2)*TMP39)+(P3(2)*4D0*(V3(3)*TMP17+V2(3)*TMP24+P1(0)*TMP39)
     $ +(TMP20*4D0*(V3(3)*P1(2)-V3(5)*P1(0))+4D0*(TMP8*(V3(3)*V2(5)
     $ -V3(5)*V2(3))))))+(P2(2)*(P3(0)*4D0*(V3(4)*TMP17+V2(4)*TMP24
     $ +P1(1)*TMP39)+(P3(1)*-4D0*(V3(3)*TMP17+V2(3)*TMP24+P1(0)*TMP39)
     $ +(TMP20*4D0*(V3(4)*P1(0)-V3(3)*P1(1))+4D0*(TMP8*(V3(4)*V2(3)
     $ -V3(3)*V2(4))))))+(TMP10*(P1(0)*4D0*(V3(5)*V2(4)-V3(4)*V2(5))
     $ +(P1(1)*4D0*(V3(3)*V2(5)-V3(5)*V2(3))+4D0*(P1(2)*(V3(4)*V2(3)
     $ -V3(3)*V2(4)))))+(TMP27*(P1(0)*4D0*(P3(1)*V2(5)-P3(2)*V2(4))
     $ +(P1(1)*4D0*(P3(2)*V2(3)-P3(0)*V2(5))+4D0*(P1(2)*(P3(0)*V2(4)
     $ -P3(1)*V2(3)))))+(TMP6*(P3(0)*4D0*(V3(5)*V2(4)-V3(4)*V2(5))
     $ +(P3(1)*4D0*(V3(3)*V2(5)-V3(5)*V2(3))+4D0*(P3(2)*(V3(4)*V2(3)
     $ -V3(3)*V2(4)))))+(V2(6)*(TMP30+TMP32-TMP31-TMP33)+(V3(6)*(TMP37
     $ +TMP38-TMP34-TMP36)+(P2(3)*2D0*(TMP13-TMP11)+2D0*(P3(3)*(TMP16
     $ -TMP14)))))))))))
      END


C     This File is Automatically generated by ALOHA 
C     The process calculated in this file is: 
C     4*Epsilon(1,2,3,-2)*P(-2,3)*P(-1,1)*P(-1,2) + 4*Epsilon(1,2,3,-2)
C     *P(-2,2)*P(-1,1)*P(-1,3) + 4*Epsilon(1,2,3,-2)*P(-2,1)*P(-1,2)*P(
C     -1,3) - 2*Epsilon(2,3,-1,-2)*P(-2,3)*P(-1,1)*P(1,2) + 2*Epsilon(2
C     ,3,-1,-2)*P(-2,1)*P(-1,3)*P(1,2) - 2*Epsilon(2,3,-1,-2)*P(-2,2)*P
C     (-1,1)*P(1,3) + 2*Epsilon(2,3,-1,-2)*P(-2,1)*P(-1,2)*P(1,3) +
C      2*Epsilon(1,3,-1,-2)*P(-2,3)*P(-1,2)*P(2,1) - 2*Epsilon(1,3,-1,-
C     2)*P(-2,2)*P(-1,3)*P(2,1) - 2*Epsilon(1,3,-1,-2)*P(-2,2)*P(-1,1)*
C     P(2,3) + 2*Epsilon(1,3,-1,-2)*P(-2,1)*P(-1,2)*P(2,3) + 2*Epsilon(
C     1,2,-1,-2)*P(-2,3)*P(-1,2)*P(3,1) - 2*Epsilon(1,2,-1,-2)*P(-2,2)*
C     P(-1,3)*P(3,1) + 2*Epsilon(1,2,-1,-2)*P(-2,3)*P(-1,1)*P(3,2) -
C      2*Epsilon(1,2,-1,-2)*P(-2,1)*P(-1,3)*P(3,2) + Epsilon(3,-1,-2,-3
C     )*P(-3,3)*P(-2,2)*P(-1,1)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,
C     3)*P(-2,1)*P(-1,2)*Metric(1,2) + Epsilon(3,-1,-2,-3)*P(-3,2)*P(-2
C     ,1)*P(-1,3)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-
C     1,3)*Metric(1,2) - Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Me
C     tric(1,3) - Epsilon(2,-1,-2,-3)*P(-3,3)*P(-2,1)*P(-1,2)*Metric(1,
C     3) + Epsilon(2,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(1,3) +
C      Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,1)*P(-1,3)*Metric(1,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,3)*P(-2,2)*P(-1,1)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Metric(2,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-1,3)*Metric(2,3)
C     
      SUBROUTINE VVV10_2_3_4_7_8_9P0_1(V2, V3, COUP1, COUP2, COUP3
     $ , COUP4, COUP5, COUP6, COUP7, M1, W1,V1)
      IMPLICIT NONE
      COMPLEX*16 CI
      PARAMETER (CI=(0D0,1D0))
      COMPLEX*16 COUP6
      REAL*8 P3(0:3)
      REAL*8 W1
      COMPLEX*16 COUP1
      COMPLEX*16 COUP2
      COMPLEX*16 VTMP(6)
      COMPLEX*16 COUP5
      COMPLEX*16 V3(*)
      REAL*8 M1
      REAL*8 P2(0:3)
      COMPLEX*16 COUP3
      COMPLEX*16 COUP4
      COMPLEX*16 V2(*)
      REAL*8 P1(0:3)
      COMPLEX*16 DENOM
      INTEGER*4 I
      COMPLEX*16 V1(6)
      COMPLEX*16 COUP7
      CALL VVV10P0_1(V2,V3,COUP1,M1,W1,V1)
      CALL VVV2P0_1(V2,V3,COUP2,M1,W1,VTMP)
      DO I = 3, 6
        V1(I) = V1(I) + VTMP(I)
      ENDDO
      CALL VVV3P0_1(V2,V3,COUP3,M1,W1,VTMP)
      DO I = 3, 6
        V1(I) = V1(I) + VTMP(I)
      ENDDO
      CALL VVV4P0_1(V2,V3,COUP4,M1,W1,VTMP)
      DO I = 3, 6
        V1(I) = V1(I) + VTMP(I)
      ENDDO
      CALL VVV7P0_1(V2,V3,COUP5,M1,W1,VTMP)
      DO I = 3, 6
        V1(I) = V1(I) + VTMP(I)
      ENDDO
      CALL VVV8P0_1(V2,V3,COUP6,M1,W1,VTMP)
      DO I = 3, 6
        V1(I) = V1(I) + VTMP(I)
      ENDDO
      CALL VVV9P0_1(V2,V3,COUP7,M1,W1,VTMP)
      DO I = 3, 6
        V1(I) = V1(I) + VTMP(I)
      ENDDO
      END


