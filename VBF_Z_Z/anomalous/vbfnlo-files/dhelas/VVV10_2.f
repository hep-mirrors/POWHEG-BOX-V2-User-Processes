C     This File is Automatically generated by ALOHA 
C     The process calculated in this file is: 
C     4*Epsilon(1,2,3,-2)*P(-2,3)*P(-1,1)*P(-1,2) + 4*Epsilon(1,2,3,-2)
C     *P(-2,2)*P(-1,1)*P(-1,3) + 4*Epsilon(1,2,3,-2)*P(-2,1)*P(-1,2)*P(
C     -1,3) - 2*Epsilon(2,3,-1,-2)*P(-2,3)*P(-1,1)*P(1,2) + 2*Epsilon(2
C     ,3,-1,-2)*P(-2,1)*P(-1,3)*P(1,2) - 2*Epsilon(2,3,-1,-2)*P(-2,2)*P
C     (-1,1)*P(1,3) + 2*Epsilon(2,3,-1,-2)*P(-2,1)*P(-1,2)*P(1,3) +
C      2*Epsilon(1,3,-1,-2)*P(-2,3)*P(-1,2)*P(2,1) - 2*Epsilon(1,3,-1,-
C     2)*P(-2,2)*P(-1,3)*P(2,1) - 2*Epsilon(1,3,-1,-2)*P(-2,2)*P(-1,1)*
C     P(2,3) + 2*Epsilon(1,3,-1,-2)*P(-2,1)*P(-1,2)*P(2,3) + 2*Epsilon(
C     1,2,-1,-2)*P(-2,3)*P(-1,2)*P(3,1) - 2*Epsilon(1,2,-1,-2)*P(-2,2)*
C     P(-1,3)*P(3,1) + 2*Epsilon(1,2,-1,-2)*P(-2,3)*P(-1,1)*P(3,2) -
C      2*Epsilon(1,2,-1,-2)*P(-2,1)*P(-1,3)*P(3,2) + Epsilon(3,-1,-2,-3
C     )*P(-3,3)*P(-2,2)*P(-1,1)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,
C     3)*P(-2,1)*P(-1,2)*Metric(1,2) + Epsilon(3,-1,-2,-3)*P(-3,2)*P(-2
C     ,1)*P(-1,3)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-
C     1,3)*Metric(1,2) - Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Me
C     tric(1,3) - Epsilon(2,-1,-2,-3)*P(-3,3)*P(-2,1)*P(-1,2)*Metric(1,
C     3) + Epsilon(2,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(1,3) +
C      Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,1)*P(-1,3)*Metric(1,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,3)*P(-2,2)*P(-1,1)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Metric(2,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-1,3)*Metric(2,3)
C     
      SUBROUTINE VVV10_2(V1, V3, COUP, M2, W2,V2)
      IMPLICIT NONE
      COMPLEX*16 CI
      PARAMETER (CI=(0D0,1D0))
      COMPLEX*16 TMP10
      REAL*8 P3(0:3)
      COMPLEX*16 TMP21
      COMPLEX*16 TMP32
      COMPLEX*16 TMP52
      COMPLEX*16 TMP43
      COMPLEX*16 TMP18
      COMPLEX*16 TMP33
      COMPLEX*16 V3(*)
      REAL*8 P2(0:3)
      REAL*8 W2
      COMPLEX*16 TMP6
      COMPLEX*16 TMP15
      COMPLEX*16 TMP53
      COMPLEX*16 OM2
      COMPLEX*16 TMP24
      COMPLEX*16 TMP19
      COMPLEX*16 V2(6)
      COMPLEX*16 TMP12
      REAL*8 P1(0:3)
      COMPLEX*16 TMP30
      COMPLEX*16 TMP54
      COMPLEX*16 DENOM
      COMPLEX*16 TMP42
      COMPLEX*16 TMP41
      REAL*8 M2
      COMPLEX*16 TMP50
      COMPLEX*16 V1(*)
      COMPLEX*16 TMP35
      COMPLEX*16 TMP22
      COMPLEX*16 TMP31
      COMPLEX*16 COUP
      COMPLEX*16 TMP40
      COMPLEX*16 TMP51
      COMPLEX*16 TMP8
      COMPLEX*16 TMP27
      P1(0) = DBLE(V1(1))
      P1(1) = DBLE(V1(2))
      P1(2) = DIMAG(V1(2))
      P1(3) = DIMAG(V1(1))
      OM2 = 0D0
      IF (M2.NE.0D0) OM2=1D0/(M2*(M2 - CI*W2))
c     IF (M2.NE.0D0) OM2=1D0/M2**2
      P3(0) = DBLE(V3(1))
      P3(1) = DBLE(V3(2))
      P3(2) = DIMAG(V3(2))
      P3(3) = DIMAG(V3(1))
      V2(1) = +V1(1)+V3(1)
      V2(2) = +V1(2)+V3(2)
      P2(0) = -DBLE(V2(1))
      P2(1) = -DBLE(V2(2))
      P2(2) = -DIMAG(V2(2))
      P2(3) = -DIMAG(V2(1))
      TMP42 = -1D0*(P1(0)*(P2(1)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+P2(3)*(P3(1)*V1(5)-P3(2)*V1(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)*(P3(0)*V1(6)
     $ -P3(3)*V1(3))+P2(3)*(P3(2)*V1(3)-P3(0)*V1(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+(P2(1)*(P3(3)*V1(3)-P3(0)*V1(6))
     $ +P2(3)*(P3(0)*V1(4)-P3(1)*V1(3))))+P1(3)*(P2(0)*(P3(2)*V1(4)
     $ -P3(1)*V1(5))+(P2(1)*(P3(0)*V1(5)-P3(2)*V1(3))+P2(2)*(P3(1)
     $ *V1(3)-P3(0)*V1(4)))))))
      TMP43 = -1D0*(P1(0)*(P2(1)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+P2(3)*(P3(2)*V1(4)-P3(1)*V1(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)*(P3(3)*V1(3)
     $ -P3(0)*V1(6))+P2(3)*(P3(0)*V1(5)-P3(2)*V1(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+(P2(1)*(P3(0)*V1(6)-P3(3)*V1(3))
     $ +P2(3)*(P3(1)*V1(3)-P3(0)*V1(4))))+P1(3)*(P2(0)*(P3(1)*V1(5)
     $ -P3(2)*V1(4))+(P2(1)*(P3(2)*V1(3)-P3(0)*V1(5))+P2(2)*(P3(0)
     $ *V1(4)-P3(1)*V1(3)))))))
      TMP40 = -1D0*(P1(0)*(P2(1)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+P2(3)*(P3(1)*V1(5)-P3(2)*V1(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)*(P3(0)*V1(6)
     $ -P3(3)*V1(3))+P2(3)*(P3(2)*V1(3)-P3(0)*V1(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+(P2(1)*(P3(3)*V1(3)-P3(0)*V1(6))
     $ +P2(3)*(P3(0)*V1(4)-P3(1)*V1(3))))+P1(3)*(P2(0)*(P3(2)*V1(4)
     $ -P3(1)*V1(5))+(P2(1)*(P3(0)*V1(5)-P3(2)*V1(3))+P2(2)*(P3(1)
     $ *V1(3)-P3(0)*V1(4)))))))
      TMP41 = -1D0*(P1(0)*(P2(1)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+P2(3)*(P3(2)*V1(4)-P3(1)*V1(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)*(P3(3)*V1(3)
     $ -P3(0)*V1(6))+P2(3)*(P3(0)*V1(5)-P3(2)*V1(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+(P2(1)*(P3(0)*V1(6)-P3(3)*V1(3))
     $ +P2(3)*(P3(1)*V1(3)-P3(0)*V1(4))))+P1(3)*(P2(0)*(P3(1)*V1(5)
     $ -P3(2)*V1(4))+(P2(1)*(P3(2)*V1(3)-P3(0)*V1(5))+P2(2)*(P3(0)
     $ *V1(4)-P3(1)*V1(3)))))))
      TMP21 = -1D0*(P1(0)*(P2(1)*(V3(5)*V1(6)-V3(6)*V1(5))+(P2(2)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+P2(3)*(V3(4)*V1(5)-V3(5)*V1(4))))
     $ +(P1(1)*(P2(0)*(V3(6)*V1(5)-V3(5)*V1(6))+(P2(2)*(V3(3)*V1(6)
     $ -V3(6)*V1(3))+P2(3)*(V3(5)*V1(3)-V3(3)*V1(5))))+(P1(2)*(P2(0)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+(P2(1)*(V3(6)*V1(3)-V3(3)*V1(6))
     $ +P2(3)*(V3(3)*V1(4)-V3(4)*V1(3))))+P1(3)*(P2(0)*(V3(5)*V1(4)
     $ -V3(4)*V1(5))+(P2(1)*(V3(3)*V1(5)-V3(5)*V1(3))+P2(2)*(V3(4)
     $ *V1(3)-V3(3)*V1(4)))))))
      TMP22 = -1D0*(P1(0)*(P2(1)*(V3(6)*V1(5)-V3(5)*V1(6))+(P2(2)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+P2(3)*(V3(5)*V1(4)-V3(4)*V1(5))))
     $ +(P1(1)*(P2(0)*(V3(5)*V1(6)-V3(6)*V1(5))+(P2(2)*(V3(6)*V1(3)
     $ -V3(3)*V1(6))+P2(3)*(V3(3)*V1(5)-V3(5)*V1(3))))+(P1(2)*(P2(0)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+(P2(1)*(V3(3)*V1(6)-V3(6)*V1(3))
     $ +P2(3)*(V3(4)*V1(3)-V3(3)*V1(4))))+P1(3)*(P2(0)*(V3(4)*V1(5)
     $ -V3(5)*V1(4))+(P2(1)*(V3(5)*V1(3)-V3(3)*V1(5))+P2(2)*(V3(3)
     $ *V1(4)-V3(4)*V1(3)))))))
      TMP33 = -1D0*(P1(0)*(P2(1)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+P2(3)*(V3(4)*P3(2)-V3(5)*P3(1))))
     $ +(P1(1)*(P2(0)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)*(V3(3)*P3(3)
     $ -V3(6)*P3(0))+P2(3)*(V3(5)*P3(0)-V3(3)*P3(2))))+(P1(2)*(P2(0)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+(P2(1)*(V3(6)*P3(0)-V3(3)*P3(3))
     $ +P2(3)*(V3(3)*P3(1)-V3(4)*P3(0))))+P1(3)*(P2(0)*(V3(5)*P3(1)
     $ -V3(4)*P3(2))+(P2(1)*(V3(3)*P3(2)-V3(5)*P3(0))+P2(2)*(V3(4)
     $ *P3(0)-V3(3)*P3(1)))))))
      TMP27 = (V3(3)*P2(0)-V3(4)*P2(1)-V3(5)*P2(2)-V3(6)*P2(3))
      TMP24 = (V3(3)*P1(0)-V3(4)*P1(1)-V3(5)*P1(2)-V3(6)*P1(3))
      TMP51 = -1D0*(P1(0)*(P2(1)*(V3(5)*V1(6)-V3(6)*V1(5))+(P2(2)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+P2(3)*(V3(4)*V1(5)-V3(5)*V1(4))))
     $ +(P1(1)*(P2(0)*(V3(6)*V1(5)-V3(5)*V1(6))+(P2(2)*(V3(3)*V1(6)
     $ -V3(6)*V1(3))+P2(3)*(V3(5)*V1(3)-V3(3)*V1(5))))+(P1(2)*(P2(0)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+(P2(1)*(V3(6)*V1(3)-V3(3)*V1(6))
     $ +P2(3)*(V3(3)*V1(4)-V3(4)*V1(3))))+P1(3)*(P2(0)*(V3(5)*V1(4)
     $ -V3(4)*V1(5))+(P2(1)*(V3(3)*V1(5)-V3(5)*V1(3))+P2(2)*(V3(4)
     $ *V1(3)-V3(3)*V1(4)))))))
      TMP50 = -1D0*(P2(0)*(P3(1)*(V3(6)*V1(5)-V3(5)*V1(6))+(P3(2)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+P3(3)*(V3(5)*V1(4)-V3(4)*V1(5))))
     $ +(P2(1)*(P3(0)*(V3(5)*V1(6)-V3(6)*V1(5))+(P3(2)*(V3(6)*V1(3)
     $ -V3(3)*V1(6))+P3(3)*(V3(3)*V1(5)-V3(5)*V1(3))))+(P2(2)*(P3(0)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+(P3(1)*(V3(3)*V1(6)-V3(6)*V1(3))
     $ +P3(3)*(V3(4)*V1(3)-V3(3)*V1(4))))+P2(3)*(P3(0)*(V3(4)*V1(5)
     $ -V3(5)*V1(4))+(P3(1)*(V3(5)*V1(3)-V3(3)*V1(5))+P3(2)*(V3(3)
     $ *V1(4)-V3(4)*V1(3)))))))
      TMP53 = -1D0*(P1(0)*(P2(1)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+P2(3)*(P3(2)*V1(4)-P3(1)*V1(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)*(P3(3)*V1(3)
     $ -P3(0)*V1(6))+P2(3)*(P3(0)*V1(5)-P3(2)*V1(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+(P2(1)*(P3(0)*V1(6)-P3(3)*V1(3))
     $ +P2(3)*(P3(1)*V1(3)-P3(0)*V1(4))))+P1(3)*(P2(0)*(P3(1)*V1(5)
     $ -P3(2)*V1(4))+(P2(1)*(P3(2)*V1(3)-P3(0)*V1(5))+P2(2)*(P3(0)
     $ *V1(4)-P3(1)*V1(3)))))))
      TMP52 = -1D0*(P1(0)*(P2(1)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+P2(3)*(V3(4)*P3(2)-V3(5)*P3(1))))
     $ +(P1(1)*(P2(0)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)*(V3(3)*P3(3)
     $ -V3(6)*P3(0))+P2(3)*(V3(5)*P3(0)-V3(3)*P3(2))))+(P1(2)*(P2(0)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+(P2(1)*(V3(6)*P3(0)-V3(3)*P3(3))
     $ +P2(3)*(V3(3)*P3(1)-V3(4)*P3(0))))+P1(3)*(P2(0)*(V3(5)*P3(1)
     $ -V3(4)*P3(2))+(P2(1)*(V3(3)*P3(2)-V3(5)*P3(0))+P2(2)*(V3(4)
     $ *P3(0)-V3(3)*P3(1)))))))
      TMP54 = -1D0*(P1(0)*(P2(1)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+P2(3)*(P3(1)*V1(5)-P3(2)*V1(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)*(P3(0)*V1(6)
     $ -P3(3)*V1(3))+P2(3)*(P3(2)*V1(3)-P3(0)*V1(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+(P2(1)*(P3(3)*V1(3)-P3(0)*V1(6))
     $ +P2(3)*(P3(0)*V1(4)-P3(1)*V1(3))))+P1(3)*(P2(0)*(P3(2)*V1(4)
     $ -P3(1)*V1(5))+(P2(1)*(P3(0)*V1(5)-P3(2)*V1(3))+P2(2)*(P3(1)
     $ *V1(3)-P3(0)*V1(4)))))))
      TMP19 = -1D0*(P2(0)*(P3(1)*(V3(6)*V1(5)-V3(5)*V1(6))+(P3(2)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+P3(3)*(V3(5)*V1(4)-V3(4)*V1(5))))
     $ +(P2(1)*(P3(0)*(V3(5)*V1(6)-V3(6)*V1(5))+(P3(2)*(V3(6)*V1(3)
     $ -V3(3)*V1(6))+P3(3)*(V3(3)*V1(5)-V3(5)*V1(3))))+(P2(2)*(P3(0)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+(P3(1)*(V3(3)*V1(6)-V3(6)*V1(3))
     $ +P3(3)*(V3(4)*V1(3)-V3(3)*V1(4))))+P2(3)*(P3(0)*(V3(4)*V1(5)
     $ -V3(5)*V1(4))+(P3(1)*(V3(5)*V1(3)-V3(3)*V1(5))+P3(2)*(V3(3)
     $ *V1(4)-V3(4)*V1(3)))))))
      TMP18 = -1D0*(P2(0)*(P3(1)*(V3(5)*V1(6)-V3(6)*V1(5))+(P3(2)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+P3(3)*(V3(4)*V1(5)-V3(5)*V1(4))))
     $ +(P2(1)*(P3(0)*(V3(6)*V1(5)-V3(5)*V1(6))+(P3(2)*(V3(3)*V1(6)
     $ -V3(6)*V1(3))+P3(3)*(V3(5)*V1(3)-V3(3)*V1(5))))+(P2(2)*(P3(0)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+(P3(1)*(V3(6)*V1(3)-V3(3)*V1(6))
     $ +P3(3)*(V3(3)*V1(4)-V3(4)*V1(3))))+P2(3)*(P3(0)*(V3(5)*V1(4)
     $ -V3(4)*V1(5))+(P3(1)*(V3(3)*V1(5)-V3(5)*V1(3))+P3(2)*(V3(4)
     $ *V1(3)-V3(3)*V1(4)))))))
      TMP15 = (P3(0)*V1(3)-P3(1)*V1(4)-P3(2)*V1(5)-P3(3)*V1(6))
      TMP32 = -1D0*(P1(0)*(P2(1)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+P2(3)*(V3(5)*P3(1)-V3(4)*P3(2))))
     $ +(P1(1)*(P2(0)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)*(V3(6)*P3(0)
     $ -V3(3)*P3(3))+P2(3)*(V3(3)*P3(2)-V3(5)*P3(0))))+(P1(2)*(P2(0)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+(P2(1)*(V3(3)*P3(3)-V3(6)*P3(0))
     $ +P2(3)*(V3(4)*P3(0)-V3(3)*P3(1))))+P1(3)*(P2(0)*(V3(4)*P3(2)
     $ -V3(5)*P3(1))+(P2(1)*(V3(5)*P3(0)-V3(3)*P3(2))+P2(2)*(V3(3)
     $ *P3(1)-V3(4)*P3(0)))))))
      TMP31 = -1D0*(P1(0)*(P2(1)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+P2(3)*(V3(4)*P3(2)-V3(5)*P3(1))))
     $ +(P1(1)*(P2(0)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)*(V3(3)*P3(3)
     $ -V3(6)*P3(0))+P2(3)*(V3(5)*P3(0)-V3(3)*P3(2))))+(P1(2)*(P2(0)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+(P2(1)*(V3(6)*P3(0)-V3(3)*P3(3))
     $ +P2(3)*(V3(3)*P3(1)-V3(4)*P3(0))))+P1(3)*(P2(0)*(V3(5)*P3(1)
     $ -V3(4)*P3(2))+(P2(1)*(V3(3)*P3(2)-V3(5)*P3(0))+P2(2)*(V3(4)
     $ *P3(0)-V3(3)*P3(1)))))))
      TMP30 = -1D0*(P1(0)*(P2(1)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+P2(3)*(V3(5)*P3(1)-V3(4)*P3(2))))
     $ +(P1(1)*(P2(0)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)*(V3(6)*P3(0)
     $ -V3(3)*P3(3))+P2(3)*(V3(3)*P3(2)-V3(5)*P3(0))))+(P1(2)*(P2(0)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+(P2(1)*(V3(3)*P3(3)-V3(6)*P3(0))
     $ +P2(3)*(V3(4)*P3(0)-V3(3)*P3(1))))+P1(3)*(P2(0)*(V3(4)*P3(2)
     $ -V3(5)*P3(1))+(P2(1)*(V3(5)*P3(0)-V3(3)*P3(2))+P2(2)*(V3(3)
     $ *P3(1)-V3(4)*P3(0)))))))
      TMP10 = (P2(0)*P3(0)-P2(1)*P3(1)-P2(2)*P3(2)-P2(3)*P3(3))
      TMP35 = (V3(3)*V1(3)-V3(4)*V1(4)-V3(5)*V1(5)-V3(6)*V1(6))
      TMP12 = (P2(0)*V1(3)-P2(1)*V1(4)-P2(2)*V1(5)-P2(3)*V1(6))
      TMP8 = (P1(0)*P3(0)-P1(1)*P3(1)-P1(2)*P3(2)-P1(3)*P3(3))
      TMP6 = (P1(0)*P2(0)-P1(1)*P2(1)-P1(2)*P2(2)-P1(3)*P2(3))
      DENOM = COUP/(P2(0)**2-P2(1)**2-P2(2)**2-P2(3)**2 - M2 * (M2 
     $ -CI* W2))
      V2(3)= DENOM*-CI*(OM2*P2(0)*(TMP27*(TMP41+TMP43+2D0*(TMP54)
     $ -TMP40-TMP42-2D0*(TMP53))+(TMP12*(TMP32+TMP31+TMP33-TMP30
     $ -2D0*(TMP52))+(TMP10*-2D0*(TMP22+2D0*(TMP51)-TMP21)-2D0*(TMP6
     $ *(TMP18+2D0*(TMP50)-TMP19)))))+(P1(1)*(P3(2)*-4D0*(V3(6)*TMP12
     $ +V1(6)*TMP27+P2(3)*TMP35)+(P3(3)*4D0*(V3(5)*TMP12+V1(5)*TMP27
     $ +P2(2)*TMP35)+(TMP10*4D0*(V3(5)*V1(6)-V3(6)*V1(5))+4D0*(TMP15
     $ *(V3(5)*P2(3)-V3(6)*P2(2))))))+(P1(2)*(P3(1)*4D0*(V3(6)*TMP12
     $ +V1(6)*TMP27+P2(3)*TMP35)+(P3(3)*-4D0*(V3(4)*TMP12+V1(4)*TMP27
     $ +P2(1)*TMP35)+(TMP10*4D0*(V3(6)*V1(4)-V3(4)*V1(6))+4D0*(TMP15
     $ *(V3(6)*P2(1)-V3(4)*P2(3))))))+(P1(3)*(P3(1)*-4D0*(V3(5)*TMP12
     $ +V1(5)*TMP27+P2(2)*TMP35)+(P3(2)*4D0*(V3(4)*TMP12+V1(4)*TMP27
     $ +P2(1)*TMP35)+(TMP10*4D0*(V3(4)*V1(5)-V3(5)*V1(4))+4D0*(TMP15
     $ *(V3(4)*P2(2)-V3(5)*P2(1))))))+(TMP24*(P2(1)*4D0*(P3(3)*V1(5)
     $ -P3(2)*V1(6))+(P2(2)*4D0*(P3(1)*V1(6)-P3(3)*V1(4))+4D0*(P2(3)
     $ *(P3(2)*V1(4)-P3(1)*V1(5)))))+(TMP6*(P3(1)*4D0*(V3(5)*V1(6)
     $ -V3(6)*V1(5))+(P3(2)*4D0*(V3(6)*V1(4)-V3(4)*V1(6))+4D0*(P3(3)
     $ *(V3(4)*V1(5)-V3(5)*V1(4)))))+(TMP8*(P2(1)*4D0*(V3(5)*V1(6)
     $ -V3(6)*V1(5))+(P2(2)*4D0*(V3(6)*V1(4)-V3(4)*V1(6))+4D0*(P2(3)
     $ *(V3(4)*V1(5)-V3(5)*V1(4)))))+(V1(3)*(TMP30+TMP32-TMP31-TMP33)
     $ +(V3(3)*(TMP40+TMP42-TMP41-TMP43)+(P1(0)*2D0*(TMP18-TMP19)
     $ +2D0*(P3(0)*(TMP22-TMP21))))))))))))
      V2(4)= DENOM*-CI*(OM2*P2(1)*(TMP27*(TMP41+TMP43+2D0*(TMP54)
     $ -TMP40-TMP42-2D0*(TMP53))+(TMP12*(TMP32+TMP31+TMP33-TMP30
     $ -2D0*(TMP52))+(TMP10*-2D0*(TMP22+2D0*(TMP51)-TMP21)-2D0*(TMP6
     $ *(TMP18+2D0*(TMP50)-TMP19)))))+(P1(0)*(P3(2)*-4D0*(V3(6)*TMP12
     $ +V1(6)*TMP27+P2(3)*TMP35)+(P3(3)*4D0*(V3(5)*TMP12+V1(5)*TMP27
     $ +P2(2)*TMP35)+(TMP10*4D0*(V3(5)*V1(6)-V3(6)*V1(5))+4D0*(TMP15
     $ *(V3(5)*P2(3)-V3(6)*P2(2))))))+(P1(2)*(P3(0)*4D0*(V3(6)*TMP12
     $ +V1(6)*TMP27+P2(3)*TMP35)+(P3(3)*-4D0*(V3(3)*TMP12+V1(3)*TMP27
     $ +P2(0)*TMP35)+(TMP10*4D0*(V3(6)*V1(3)-V3(3)*V1(6))+4D0*(TMP15
     $ *(V3(6)*P2(0)-V3(3)*P2(3))))))+(P1(3)*(P3(0)*-4D0*(V3(5)*TMP12
     $ +V1(5)*TMP27+P2(2)*TMP35)+(P3(2)*4D0*(V3(3)*TMP12+V1(3)*TMP27
     $ +P2(0)*TMP35)+(TMP10*4D0*(V3(3)*V1(5)-V3(5)*V1(3))+4D0*(TMP15
     $ *(V3(3)*P2(2)-V3(5)*P2(0))))))+(TMP24*(P2(0)*4D0*(P3(3)*V1(5)
     $ -P3(2)*V1(6))+(P2(2)*4D0*(P3(0)*V1(6)-P3(3)*V1(3))+4D0*(P2(3)
     $ *(P3(2)*V1(3)-P3(0)*V1(5)))))+(TMP6*(P3(0)*4D0*(V3(5)*V1(6)
     $ -V3(6)*V1(5))+(P3(2)*4D0*(V3(6)*V1(3)-V3(3)*V1(6))+4D0*(P3(3)
     $ *(V3(3)*V1(5)-V3(5)*V1(3)))))+(TMP8*(P2(0)*4D0*(V3(5)*V1(6)
     $ -V3(6)*V1(5))+(P2(2)*4D0*(V3(6)*V1(3)-V3(3)*V1(6))+4D0*(P2(3)
     $ *(V3(3)*V1(5)-V3(5)*V1(3)))))+(V1(4)*(TMP30+TMP32-TMP31-TMP33)
     $ +(V3(4)*(TMP40+TMP42-TMP41-TMP43)+(P1(1)*2D0*(TMP18-TMP19)
     $ +2D0*(P3(1)*(TMP22-TMP21))))))))))))
      V2(5)= DENOM*-CI*(OM2*P2(2)*(TMP27*(TMP41+TMP43+2D0*(TMP54)
     $ -TMP40-TMP42-2D0*(TMP53))+(TMP12*(TMP32+TMP31+TMP33-TMP30
     $ -2D0*(TMP52))+(TMP10*-2D0*(TMP22+2D0*(TMP51)-TMP21)-2D0*(TMP6
     $ *(TMP18+2D0*(TMP50)-TMP19)))))+(P1(0)*(P3(1)*4D0*(V3(6)*TMP12
     $ +V1(6)*TMP27+P2(3)*TMP35)+(P3(3)*-4D0*(V3(4)*TMP12+V1(4)*TMP27
     $ +P2(1)*TMP35)+(TMP10*4D0*(V3(6)*V1(4)-V3(4)*V1(6))+4D0*(TMP15
     $ *(V3(6)*P2(1)-V3(4)*P2(3))))))+(P1(1)*(P3(0)*-4D0*(V3(6)*TMP12
     $ +V1(6)*TMP27+P2(3)*TMP35)+(P3(3)*4D0*(V3(3)*TMP12+V1(3)*TMP27
     $ +P2(0)*TMP35)+(TMP10*4D0*(V3(3)*V1(6)-V3(6)*V1(3))+4D0*(TMP15
     $ *(V3(3)*P2(3)-V3(6)*P2(0))))))+(P1(3)*(P3(0)*4D0*(V3(4)*TMP12
     $ +V1(4)*TMP27+P2(1)*TMP35)+(P3(1)*-4D0*(V3(3)*TMP12+V1(3)*TMP27
     $ +P2(0)*TMP35)+(TMP10*4D0*(V3(4)*V1(3)-V3(3)*V1(4))+4D0*(TMP15
     $ *(V3(4)*P2(0)-V3(3)*P2(1))))))+(TMP24*(P2(0)*4D0*(P3(1)*V1(6)
     $ -P3(3)*V1(4))+(P2(1)*4D0*(P3(3)*V1(3)-P3(0)*V1(6))+4D0*(P2(3)
     $ *(P3(0)*V1(4)-P3(1)*V1(3)))))+(TMP6*(P3(0)*4D0*(V3(6)*V1(4)
     $ -V3(4)*V1(6))+(P3(1)*4D0*(V3(3)*V1(6)-V3(6)*V1(3))+4D0*(P3(3)
     $ *(V3(4)*V1(3)-V3(3)*V1(4)))))+(TMP8*(P2(0)*4D0*(V3(6)*V1(4)
     $ -V3(4)*V1(6))+(P2(1)*4D0*(V3(3)*V1(6)-V3(6)*V1(3))+4D0*(P2(3)
     $ *(V3(4)*V1(3)-V3(3)*V1(4)))))+(V1(5)*(TMP30+TMP32-TMP31-TMP33)
     $ +(V3(5)*(TMP40+TMP42-TMP41-TMP43)+(P1(2)*2D0*(TMP18-TMP19)
     $ +2D0*(P3(2)*(TMP22-TMP21))))))))))))
      V2(6)= DENOM*-CI*(OM2*P2(3)*(TMP27*(TMP41+TMP43+2D0*(TMP54)
     $ -TMP40-TMP42-2D0*(TMP53))+(TMP12*(TMP32+TMP31+TMP33-TMP30
     $ -2D0*(TMP52))+(TMP10*-2D0*(TMP22+2D0*(TMP51)-TMP21)-2D0*(TMP6
     $ *(TMP18+2D0*(TMP50)-TMP19)))))+(P1(0)*(P3(1)*-4D0*(V3(5)*TMP12
     $ +V1(5)*TMP27+P2(2)*TMP35)+(P3(2)*4D0*(V3(4)*TMP12+V1(4)*TMP27
     $ +P2(1)*TMP35)+(TMP10*4D0*(V3(4)*V1(5)-V3(5)*V1(4))+4D0*(TMP15
     $ *(V3(4)*P2(2)-V3(5)*P2(1))))))+(P1(1)*(P3(0)*4D0*(V3(5)*TMP12
     $ +V1(5)*TMP27+P2(2)*TMP35)+(P3(2)*-4D0*(V3(3)*TMP12+V1(3)*TMP27
     $ +P2(0)*TMP35)+(TMP10*4D0*(V3(5)*V1(3)-V3(3)*V1(5))+4D0*(TMP15
     $ *(V3(5)*P2(0)-V3(3)*P2(2))))))+(P1(2)*(P3(0)*-4D0*(V3(4)*TMP12
     $ +V1(4)*TMP27+P2(1)*TMP35)+(P3(1)*4D0*(V3(3)*TMP12+V1(3)*TMP27
     $ +P2(0)*TMP35)+(TMP10*4D0*(V3(3)*V1(4)-V3(4)*V1(3))+4D0*(TMP15
     $ *(V3(3)*P2(1)-V3(4)*P2(0))))))+(TMP24*(P2(0)*4D0*(P3(2)*V1(4)
     $ -P3(1)*V1(5))+(P2(1)*4D0*(P3(0)*V1(5)-P3(2)*V1(3))+4D0*(P2(2)
     $ *(P3(1)*V1(3)-P3(0)*V1(4)))))+(TMP6*(P3(0)*4D0*(V3(4)*V1(5)
     $ -V3(5)*V1(4))+(P3(1)*4D0*(V3(5)*V1(3)-V3(3)*V1(5))+4D0*(P3(2)
     $ *(V3(3)*V1(4)-V3(4)*V1(3)))))+(TMP8*(P2(0)*4D0*(V3(4)*V1(5)
     $ -V3(5)*V1(4))+(P2(1)*4D0*(V3(5)*V1(3)-V3(3)*V1(5))+4D0*(P2(2)
     $ *(V3(3)*V1(4)-V3(4)*V1(3)))))+(V1(6)*(TMP30+TMP32-TMP31-TMP33)
     $ +(V3(6)*(TMP40+TMP42-TMP41-TMP43)+(P1(3)*2D0*(TMP18-TMP19)
     $ +2D0*(P3(3)*(TMP22-TMP21))))))))))))
      END


C     This File is Automatically generated by ALOHA 
C     The process calculated in this file is: 
C     4*Epsilon(1,2,3,-2)*P(-2,3)*P(-1,1)*P(-1,2) + 4*Epsilon(1,2,3,-2)
C     *P(-2,2)*P(-1,1)*P(-1,3) + 4*Epsilon(1,2,3,-2)*P(-2,1)*P(-1,2)*P(
C     -1,3) - 2*Epsilon(2,3,-1,-2)*P(-2,3)*P(-1,1)*P(1,2) + 2*Epsilon(2
C     ,3,-1,-2)*P(-2,1)*P(-1,3)*P(1,2) - 2*Epsilon(2,3,-1,-2)*P(-2,2)*P
C     (-1,1)*P(1,3) + 2*Epsilon(2,3,-1,-2)*P(-2,1)*P(-1,2)*P(1,3) +
C      2*Epsilon(1,3,-1,-2)*P(-2,3)*P(-1,2)*P(2,1) - 2*Epsilon(1,3,-1,-
C     2)*P(-2,2)*P(-1,3)*P(2,1) - 2*Epsilon(1,3,-1,-2)*P(-2,2)*P(-1,1)*
C     P(2,3) + 2*Epsilon(1,3,-1,-2)*P(-2,1)*P(-1,2)*P(2,3) + 2*Epsilon(
C     1,2,-1,-2)*P(-2,3)*P(-1,2)*P(3,1) - 2*Epsilon(1,2,-1,-2)*P(-2,2)*
C     P(-1,3)*P(3,1) + 2*Epsilon(1,2,-1,-2)*P(-2,3)*P(-1,1)*P(3,2) -
C      2*Epsilon(1,2,-1,-2)*P(-2,1)*P(-1,3)*P(3,2) + Epsilon(3,-1,-2,-3
C     )*P(-3,3)*P(-2,2)*P(-1,1)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,
C     3)*P(-2,1)*P(-1,2)*Metric(1,2) + Epsilon(3,-1,-2,-3)*P(-3,2)*P(-2
C     ,1)*P(-1,3)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-
C     1,3)*Metric(1,2) - Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Me
C     tric(1,3) - Epsilon(2,-1,-2,-3)*P(-3,3)*P(-2,1)*P(-1,2)*Metric(1,
C     3) + Epsilon(2,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(1,3) +
C      Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,1)*P(-1,3)*Metric(1,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,3)*P(-2,2)*P(-1,1)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Metric(2,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-1,3)*Metric(2,3)
C     
      SUBROUTINE VVV10_2_3_4_7_8_9_2(V1, V3, COUP1, COUP2, COUP3
     $ , COUP4, COUP5, COUP6, COUP7, M2, W2,V2)
      IMPLICIT NONE
      COMPLEX*16 CI
      PARAMETER (CI=(0D0,1D0))
      COMPLEX*16 COUP6
      REAL*8 P3(0:3)
      COMPLEX*16 COUP2
      COMPLEX*16 V3(*)
      REAL*8 P2(0:3)
      REAL*8 W2
      COMPLEX*16 COUP1
      COMPLEX*16 OM2
      COMPLEX*16 COUP4
      COMPLEX*16 V2(6)
      REAL*8 P1(0:3)
      COMPLEX*16 COUP5
      COMPLEX*16 DENOM
      INTEGER*4 I
      COMPLEX*16 VTMP(6)
      REAL*8 M2
      COMPLEX*16 V1(*)
      COMPLEX*16 COUP7
      COMPLEX*16 COUP3
      CALL VVV10_2(V1,V3,COUP1,M2,W2,V2)
      CALL VVV2_2(V1,V3,COUP2,M2,W2,VTMP)
      DO I = 3, 6
        V2(I) = V2(I) + VTMP(I)
      ENDDO
      CALL VVV3_2(V1,V3,COUP3,M2,W2,VTMP)
      DO I = 3, 6
        V2(I) = V2(I) + VTMP(I)
      ENDDO
      CALL VVV4_2(V1,V3,COUP4,M2,W2,VTMP)
      DO I = 3, 6
        V2(I) = V2(I) + VTMP(I)
      ENDDO
      CALL VVV7_2(V1,V3,COUP5,M2,W2,VTMP)
      DO I = 3, 6
        V2(I) = V2(I) + VTMP(I)
      ENDDO
      CALL VVV8_2(V1,V3,COUP6,M2,W2,VTMP)
      DO I = 3, 6
        V2(I) = V2(I) + VTMP(I)
      ENDDO
      CALL VVV9_2(V1,V3,COUP7,M2,W2,VTMP)
      DO I = 3, 6
        V2(I) = V2(I) + VTMP(I)
      ENDDO
      END


