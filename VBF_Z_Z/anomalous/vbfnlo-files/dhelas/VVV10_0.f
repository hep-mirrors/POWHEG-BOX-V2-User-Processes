C     This File is Automatically generated by ALOHA 
C     The process calculated in this file is: 
C     4*Epsilon(1,2,3,-2)*P(-2,3)*P(-1,1)*P(-1,2) + 4*Epsilon(1,2,3,-2)
C     *P(-2,2)*P(-1,1)*P(-1,3) + 4*Epsilon(1,2,3,-2)*P(-2,1)*P(-1,2)*P(
C     -1,3) - 2*Epsilon(2,3,-1,-2)*P(-2,3)*P(-1,1)*P(1,2) + 2*Epsilon(2
C     ,3,-1,-2)*P(-2,1)*P(-1,3)*P(1,2) - 2*Epsilon(2,3,-1,-2)*P(-2,2)*P
C     (-1,1)*P(1,3) + 2*Epsilon(2,3,-1,-2)*P(-2,1)*P(-1,2)*P(1,3) +
C      2*Epsilon(1,3,-1,-2)*P(-2,3)*P(-1,2)*P(2,1) - 2*Epsilon(1,3,-1,-
C     2)*P(-2,2)*P(-1,3)*P(2,1) - 2*Epsilon(1,3,-1,-2)*P(-2,2)*P(-1,1)*
C     P(2,3) + 2*Epsilon(1,3,-1,-2)*P(-2,1)*P(-1,2)*P(2,3) + 2*Epsilon(
C     1,2,-1,-2)*P(-2,3)*P(-1,2)*P(3,1) - 2*Epsilon(1,2,-1,-2)*P(-2,2)*
C     P(-1,3)*P(3,1) + 2*Epsilon(1,2,-1,-2)*P(-2,3)*P(-1,1)*P(3,2) -
C      2*Epsilon(1,2,-1,-2)*P(-2,1)*P(-1,3)*P(3,2) + Epsilon(3,-1,-2,-3
C     )*P(-3,3)*P(-2,2)*P(-1,1)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,
C     3)*P(-2,1)*P(-1,2)*Metric(1,2) + Epsilon(3,-1,-2,-3)*P(-3,2)*P(-2
C     ,1)*P(-1,3)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-
C     1,3)*Metric(1,2) - Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Me
C     tric(1,3) - Epsilon(2,-1,-2,-3)*P(-3,3)*P(-2,1)*P(-1,2)*Metric(1,
C     3) + Epsilon(2,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(1,3) +
C      Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,1)*P(-1,3)*Metric(1,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,3)*P(-2,2)*P(-1,1)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Metric(2,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-1,3)*Metric(2,3)
C     
      SUBROUTINE VVV10_0(V1, V2, V3, COUP,VERTEX)
      IMPLICIT NONE
      COMPLEX*16 CI
      PARAMETER (CI=(0D0,1D0))
      COMPLEX*16 TMP39
      COMPLEX*16 TMP10
      COMPLEX*16 TMP6
      REAL*8 P3(0:3)
      COMPLEX*16 TMP21
      COMPLEX*16 TMP5
      COMPLEX*16 TMP14
      COMPLEX*16 TMP28
      COMPLEX*16 TMP25
      COMPLEX*16 TMP9
      COMPLEX*16 TMP18
      COMPLEX*16 TMP33
      COMPLEX*16 V3(*)
      COMPLEX*16 TMP11
      REAL*8 P2(0:3)
      COMPLEX*16 TMP36
      COMPLEX*16 TMP20
      COMPLEX*16 TMP40
      COMPLEX*16 TMP15
      COMPLEX*16 TMP35
      COMPLEX*16 TMP34
      COMPLEX*16 TMP42
      COMPLEX*16 TMP19
      COMPLEX*16 V2(*)
      COMPLEX*16 TMP12
      REAL*8 P1(0:3)
      COMPLEX*16 TMP23
      COMPLEX*16 TMP7
      COMPLEX*16 TMP43
      COMPLEX*16 TMP16
      COMPLEX*16 TMP30
      COMPLEX*16 TMP24
      COMPLEX*16 VERTEX
      COMPLEX*16 TMP41
      COMPLEX*16 TMP37
      COMPLEX*16 V1(*)
      COMPLEX*16 TMP13
      COMPLEX*16 TMP38
      COMPLEX*16 TMP22
      COMPLEX*16 TMP17
      COMPLEX*16 TMP26
      COMPLEX*16 TMP32
      COMPLEX*16 TMP29
      COMPLEX*16 COUP
      COMPLEX*16 TMP8
      COMPLEX*16 TMP31
      COMPLEX*16 TMP27
      P1(0) = DBLE(V1(1))
      P1(1) = DBLE(V1(2))
      P1(2) = DIMAG(V1(2))
      P1(3) = DIMAG(V1(1))
      P2(0) = DBLE(V2(1))
      P2(1) = DBLE(V2(2))
      P2(2) = DIMAG(V2(2))
      P2(3) = DIMAG(V2(1))
      P3(0) = DBLE(V3(1))
      P3(1) = DBLE(V3(2))
      P3(2) = DIMAG(V3(2))
      P3(3) = DIMAG(V3(1))
      TMP42 = -1D0*(P1(0)*(P2(1)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+P2(3)*(P3(1)*V1(5)-P3(2)*V1(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)*(P3(0)*V1(6)
     $ -P3(3)*V1(3))+P2(3)*(P3(2)*V1(3)-P3(0)*V1(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+(P2(1)*(P3(3)*V1(3)-P3(0)*V1(6))
     $ +P2(3)*(P3(0)*V1(4)-P3(1)*V1(3))))+P1(3)*(P2(0)*(P3(2)*V1(4)
     $ -P3(1)*V1(5))+(P2(1)*(P3(0)*V1(5)-P3(2)*V1(3))+P2(2)*(P3(1)
     $ *V1(3)-P3(0)*V1(4)))))))
      TMP43 = -1D0*(P1(0)*(P2(1)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+P2(3)*(P3(2)*V1(4)-P3(1)*V1(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)*(P3(3)*V1(3)
     $ -P3(0)*V1(6))+P2(3)*(P3(0)*V1(5)-P3(2)*V1(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+(P2(1)*(P3(0)*V1(6)-P3(3)*V1(3))
     $ +P2(3)*(P3(1)*V1(3)-P3(0)*V1(4))))+P1(3)*(P2(0)*(P3(1)*V1(5)
     $ -P3(2)*V1(4))+(P2(1)*(P3(2)*V1(3)-P3(0)*V1(5))+P2(2)*(P3(0)
     $ *V1(4)-P3(1)*V1(3)))))))
      TMP40 = -1D0*(P1(0)*(P2(1)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+P2(3)*(P3(1)*V1(5)-P3(2)*V1(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)*(P3(0)*V1(6)
     $ -P3(3)*V1(3))+P2(3)*(P3(2)*V1(3)-P3(0)*V1(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+(P2(1)*(P3(3)*V1(3)-P3(0)*V1(6))
     $ +P2(3)*(P3(0)*V1(4)-P3(1)*V1(3))))+P1(3)*(P2(0)*(P3(2)*V1(4)
     $ -P3(1)*V1(5))+(P2(1)*(P3(0)*V1(5)-P3(2)*V1(3))+P2(2)*(P3(1)
     $ *V1(3)-P3(0)*V1(4)))))))
      TMP41 = -1D0*(P1(0)*(P2(1)*(P3(3)*V1(5)-P3(2)*V1(6))+(P2(2)
     $ *(P3(1)*V1(6)-P3(3)*V1(4))+P2(3)*(P3(2)*V1(4)-P3(1)*V1(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V1(6)-P3(3)*V1(5))+(P2(2)*(P3(3)*V1(3)
     $ -P3(0)*V1(6))+P2(3)*(P3(0)*V1(5)-P3(2)*V1(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V1(4)-P3(1)*V1(6))+(P2(1)*(P3(0)*V1(6)-P3(3)*V1(3))
     $ +P2(3)*(P3(1)*V1(3)-P3(0)*V1(4))))+P1(3)*(P2(0)*(P3(1)*V1(5)
     $ -P3(2)*V1(4))+(P2(1)*(P3(2)*V1(3)-P3(0)*V1(5))+P2(2)*(P3(0)
     $ *V1(4)-P3(1)*V1(3)))))))
      TMP20 = (P3(0)*V2(3)-P3(1)*V2(4)-P3(2)*V2(5)-P3(3)*V2(6))
      TMP21 = -1D0*(P1(0)*(P2(1)*(V3(5)*V1(6)-V3(6)*V1(5))+(P2(2)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+P2(3)*(V3(4)*V1(5)-V3(5)*V1(4))))
     $ +(P1(1)*(P2(0)*(V3(6)*V1(5)-V3(5)*V1(6))+(P2(2)*(V3(3)*V1(6)
     $ -V3(6)*V1(3))+P2(3)*(V3(5)*V1(3)-V3(3)*V1(5))))+(P1(2)*(P2(0)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+(P2(1)*(V3(6)*V1(3)-V3(3)*V1(6))
     $ +P2(3)*(V3(3)*V1(4)-V3(4)*V1(3))))+P1(3)*(P2(0)*(V3(5)*V1(4)
     $ -V3(4)*V1(5))+(P2(1)*(V3(3)*V1(5)-V3(5)*V1(3))+P2(2)*(V3(4)
     $ *V1(3)-V3(3)*V1(4)))))))
      TMP22 = -1D0*(P1(0)*(P2(1)*(V3(6)*V1(5)-V3(5)*V1(6))+(P2(2)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+P2(3)*(V3(5)*V1(4)-V3(4)*V1(5))))
     $ +(P1(1)*(P2(0)*(V3(5)*V1(6)-V3(6)*V1(5))+(P2(2)*(V3(6)*V1(3)
     $ -V3(3)*V1(6))+P2(3)*(V3(3)*V1(5)-V3(5)*V1(3))))+(P1(2)*(P2(0)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+(P2(1)*(V3(3)*V1(6)-V3(6)*V1(3))
     $ +P2(3)*(V3(4)*V1(3)-V3(3)*V1(4))))+P1(3)*(P2(0)*(V3(4)*V1(5)
     $ -V3(5)*V1(4))+(P2(1)*(V3(5)*V1(3)-V3(3)*V1(5))+P2(2)*(V3(3)
     $ *V1(4)-V3(4)*V1(3)))))))
      TMP25 = -1D0*(P2(0)*(P3(1)*(V2(6)*V1(5)-V2(5)*V1(6))+(P3(2)
     $ *(V2(4)*V1(6)-V2(6)*V1(4))+P3(3)*(V2(5)*V1(4)-V2(4)*V1(5))))
     $ +(P2(1)*(P3(0)*(V2(5)*V1(6)-V2(6)*V1(5))+(P3(2)*(V2(6)*V1(3)
     $ -V2(3)*V1(6))+P3(3)*(V2(3)*V1(5)-V2(5)*V1(3))))+(P2(2)*(P3(0)
     $ *(V2(6)*V1(4)-V2(4)*V1(6))+(P3(1)*(V2(3)*V1(6)-V2(6)*V1(3))
     $ +P3(3)*(V2(4)*V1(3)-V2(3)*V1(4))))+P2(3)*(P3(0)*(V2(4)*V1(5)
     $ -V2(5)*V1(4))+(P3(1)*(V2(5)*V1(3)-V2(3)*V1(5))+P3(2)*(V2(3)
     $ *V1(4)-V2(4)*V1(3)))))))
      TMP28 = -1D0*(P1(0)*(P3(1)*(V2(6)*V1(5)-V2(5)*V1(6))+(P3(2)
     $ *(V2(4)*V1(6)-V2(6)*V1(4))+P3(3)*(V2(5)*V1(4)-V2(4)*V1(5))))
     $ +(P1(1)*(P3(0)*(V2(5)*V1(6)-V2(6)*V1(5))+(P3(2)*(V2(6)*V1(3)
     $ -V2(3)*V1(6))+P3(3)*(V2(3)*V1(5)-V2(5)*V1(3))))+(P1(2)*(P3(0)
     $ *(V2(6)*V1(4)-V2(4)*V1(6))+(P3(1)*(V2(3)*V1(6)-V2(6)*V1(3))
     $ +P3(3)*(V2(4)*V1(3)-V2(3)*V1(4))))+P1(3)*(P3(0)*(V2(4)*V1(5)
     $ -V2(5)*V1(4))+(P3(1)*(V2(5)*V1(3)-V2(3)*V1(5))+P3(2)*(V2(3)
     $ *V1(4)-V2(4)*V1(3)))))))
      TMP26 = -1D0*(P1(0)*(P3(1)*(V2(5)*V1(6)-V2(6)*V1(5))+(P3(2)
     $ *(V2(6)*V1(4)-V2(4)*V1(6))+P3(3)*(V2(4)*V1(5)-V2(5)*V1(4))))
     $ +(P1(1)*(P3(0)*(V2(6)*V1(5)-V2(5)*V1(6))+(P3(2)*(V2(3)*V1(6)
     $ -V2(6)*V1(3))+P3(3)*(V2(5)*V1(3)-V2(3)*V1(5))))+(P1(2)*(P3(0)
     $ *(V2(4)*V1(6)-V2(6)*V1(4))+(P3(1)*(V2(6)*V1(3)-V2(3)*V1(6))
     $ +P3(3)*(V2(3)*V1(4)-V2(4)*V1(3))))+P1(3)*(P3(0)*(V2(5)*V1(4)
     $ -V2(4)*V1(5))+(P3(1)*(V2(3)*V1(5)-V2(5)*V1(3))+P3(2)*(V2(4)
     $ *V1(3)-V2(3)*V1(4)))))))
      TMP15 = (P3(0)*V1(3)-P3(1)*V1(4)-P3(2)*V1(5)-P3(3)*V1(6))
      TMP27 = (V3(3)*P2(0)-V3(4)*P2(1)-V3(5)*P2(2)-V3(6)*P2(3))
      TMP14 = -1D0*(P1(0)*(P2(1)*(V3(5)*V2(6)-V3(6)*V2(5))+(P2(2)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+P2(3)*(V3(4)*V2(5)-V3(5)*V2(4))))
     $ +(P1(1)*(P2(0)*(V3(6)*V2(5)-V3(5)*V2(6))+(P2(2)*(V3(3)*V2(6)
     $ -V3(6)*V2(3))+P2(3)*(V3(5)*V2(3)-V3(3)*V2(5))))+(P1(2)*(P2(0)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+(P2(1)*(V3(6)*V2(3)-V3(3)*V2(6))
     $ +P2(3)*(V3(3)*V2(4)-V3(4)*V2(3))))+P1(3)*(P2(0)*(V3(5)*V2(4)
     $ -V3(4)*V2(5))+(P2(1)*(V3(3)*V2(5)-V3(5)*V2(3))+P2(2)*(V3(4)
     $ *V2(3)-V3(3)*V2(4)))))))
      TMP17 = (P1(0)*V2(3)-P1(1)*V2(4)-P1(2)*V2(5)-P1(3)*V2(6))
      TMP16 = -1D0*(P1(0)*(P2(1)*(V3(6)*V2(5)-V3(5)*V2(6))+(P2(2)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+P2(3)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P1(1)*(P2(0)*(V3(5)*V2(6)-V3(6)*V2(5))+(P2(2)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+P2(3)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P1(2)*(P2(0)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(P2(1)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +P2(3)*(V3(4)*V2(3)-V3(3)*V2(4))))+P1(3)*(P2(0)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(P2(1)*(V3(5)*V2(3)-V3(3)*V2(5))+P2(2)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP11 = -1D0*(P1(0)*(P3(1)*(V3(5)*V2(6)-V3(6)*V2(5))+(P3(2)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+P3(3)*(V3(4)*V2(5)-V3(5)*V2(4))))
     $ +(P1(1)*(P3(0)*(V3(6)*V2(5)-V3(5)*V2(6))+(P3(2)*(V3(3)*V2(6)
     $ -V3(6)*V2(3))+P3(3)*(V3(5)*V2(3)-V3(3)*V2(5))))+(P1(2)*(P3(0)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+(P3(1)*(V3(6)*V2(3)-V3(3)*V2(6))
     $ +P3(3)*(V3(3)*V2(4)-V3(4)*V2(3))))+P1(3)*(P3(0)*(V3(5)*V2(4)
     $ -V3(4)*V2(5))+(P3(1)*(V3(3)*V2(5)-V3(5)*V2(3))+P3(2)*(V3(4)
     $ *V2(3)-V3(3)*V2(4)))))))
      TMP23 = -1D0*(P2(0)*(P3(1)*(V2(5)*V1(6)-V2(6)*V1(5))+(P3(2)
     $ *(V2(6)*V1(4)-V2(4)*V1(6))+P3(3)*(V2(4)*V1(5)-V2(5)*V1(4))))
     $ +(P2(1)*(P3(0)*(V2(6)*V1(5)-V2(5)*V1(6))+(P3(2)*(V2(3)*V1(6)
     $ -V2(6)*V1(3))+P3(3)*(V2(5)*V1(3)-V2(3)*V1(5))))+(P2(2)*(P3(0)
     $ *(V2(4)*V1(6)-V2(6)*V1(4))+(P3(1)*(V2(6)*V1(3)-V2(3)*V1(6))
     $ +P3(3)*(V2(3)*V1(4)-V2(4)*V1(3))))+P2(3)*(P3(0)*(V2(5)*V1(4)
     $ -V2(4)*V1(5))+(P3(1)*(V2(3)*V1(5)-V2(5)*V1(3))+P3(2)*(V2(4)
     $ *V1(3)-V2(3)*V1(4)))))))
      TMP10 = (P2(0)*P3(0)-P2(1)*P3(1)-P2(2)*P3(2)-P2(3)*P3(3))
      TMP13 = -1D0*(P1(0)*(P3(1)*(V3(6)*V2(5)-V3(5)*V2(6))+(P3(2)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+P3(3)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P1(1)*(P3(0)*(V3(5)*V2(6)-V3(6)*V2(5))+(P3(2)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+P3(3)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P1(2)*(P3(0)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(P3(1)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +P3(3)*(V3(4)*V2(3)-V3(3)*V2(4))))+P1(3)*(P3(0)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(P3(1)*(V3(5)*V2(3)-V3(3)*V2(5))+P3(2)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP24 = (V3(3)*P1(0)-V3(4)*P1(1)-V3(5)*P1(2)-V3(6)*P1(3))
      TMP12 = (P2(0)*V1(3)-P2(1)*V1(4)-P2(2)*V1(5)-P2(3)*V1(6))
      TMP29 = (V2(3)*V1(3)-V2(4)*V1(4)-V2(5)*V1(5)-V2(6)*V1(6))
      TMP39 = (V3(3)*V2(3)-V3(4)*V2(4)-V3(5)*V2(5)-V3(6)*V2(6))
      TMP38 = -1D0*(P1(0)*(P2(1)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+P2(3)*(P3(1)*V2(5)-P3(2)*V2(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)*(P3(0)*V2(6)
     $ -P3(3)*V2(3))+P2(3)*(P3(2)*V2(3)-P3(0)*V2(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+(P2(1)*(P3(3)*V2(3)-P3(0)*V2(6))
     $ +P2(3)*(P3(0)*V2(4)-P3(1)*V2(3))))+P1(3)*(P2(0)*(P3(2)*V2(4)
     $ -P3(1)*V2(5))+(P2(1)*(P3(0)*V2(5)-P3(2)*V2(3))+P2(2)*(P3(1)
     $ *V2(3)-P3(0)*V2(4)))))))
      TMP19 = -1D0*(P2(0)*(P3(1)*(V3(6)*V1(5)-V3(5)*V1(6))+(P3(2)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+P3(3)*(V3(5)*V1(4)-V3(4)*V1(5))))
     $ +(P2(1)*(P3(0)*(V3(5)*V1(6)-V3(6)*V1(5))+(P3(2)*(V3(6)*V1(3)
     $ -V3(3)*V1(6))+P3(3)*(V3(3)*V1(5)-V3(5)*V1(3))))+(P2(2)*(P3(0)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+(P3(1)*(V3(3)*V1(6)-V3(6)*V1(3))
     $ +P3(3)*(V3(4)*V1(3)-V3(3)*V1(4))))+P2(3)*(P3(0)*(V3(4)*V1(5)
     $ -V3(5)*V1(4))+(P3(1)*(V3(5)*V1(3)-V3(3)*V1(5))+P3(2)*(V3(3)
     $ *V1(4)-V3(4)*V1(3)))))))
      TMP18 = -1D0*(P2(0)*(P3(1)*(V3(5)*V1(6)-V3(6)*V1(5))+(P3(2)
     $ *(V3(6)*V1(4)-V3(4)*V1(6))+P3(3)*(V3(4)*V1(5)-V3(5)*V1(4))))
     $ +(P2(1)*(P3(0)*(V3(6)*V1(5)-V3(5)*V1(6))+(P3(2)*(V3(3)*V1(6)
     $ -V3(6)*V1(3))+P3(3)*(V3(5)*V1(3)-V3(3)*V1(5))))+(P2(2)*(P3(0)
     $ *(V3(4)*V1(6)-V3(6)*V1(4))+(P3(1)*(V3(6)*V1(3)-V3(3)*V1(6))
     $ +P3(3)*(V3(3)*V1(4)-V3(4)*V1(3))))+P2(3)*(P3(0)*(V3(5)*V1(4)
     $ -V3(4)*V1(5))+(P3(1)*(V3(3)*V1(5)-V3(5)*V1(3))+P3(2)*(V3(4)
     $ *V1(3)-V3(3)*V1(4)))))))
      TMP33 = -1D0*(P1(0)*(P2(1)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+P2(3)*(V3(4)*P3(2)-V3(5)*P3(1))))
     $ +(P1(1)*(P2(0)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)*(V3(3)*P3(3)
     $ -V3(6)*P3(0))+P2(3)*(V3(5)*P3(0)-V3(3)*P3(2))))+(P1(2)*(P2(0)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+(P2(1)*(V3(6)*P3(0)-V3(3)*P3(3))
     $ +P2(3)*(V3(3)*P3(1)-V3(4)*P3(0))))+P1(3)*(P2(0)*(V3(5)*P3(1)
     $ -V3(4)*P3(2))+(P2(1)*(V3(3)*P3(2)-V3(5)*P3(0))+P2(2)*(V3(4)
     $ *P3(0)-V3(3)*P3(1)))))))
      TMP32 = -1D0*(P1(0)*(P2(1)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+P2(3)*(V3(5)*P3(1)-V3(4)*P3(2))))
     $ +(P1(1)*(P2(0)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)*(V3(6)*P3(0)
     $ -V3(3)*P3(3))+P2(3)*(V3(3)*P3(2)-V3(5)*P3(0))))+(P1(2)*(P2(0)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+(P2(1)*(V3(3)*P3(3)-V3(6)*P3(0))
     $ +P2(3)*(V3(4)*P3(0)-V3(3)*P3(1))))+P1(3)*(P2(0)*(V3(4)*P3(2)
     $ -V3(5)*P3(1))+(P2(1)*(V3(5)*P3(0)-V3(3)*P3(2))+P2(2)*(V3(3)
     $ *P3(1)-V3(4)*P3(0)))))))
      TMP31 = -1D0*(P1(0)*(P2(1)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+P2(3)*(V3(4)*P3(2)-V3(5)*P3(1))))
     $ +(P1(1)*(P2(0)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)*(V3(3)*P3(3)
     $ -V3(6)*P3(0))+P2(3)*(V3(5)*P3(0)-V3(3)*P3(2))))+(P1(2)*(P2(0)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+(P2(1)*(V3(6)*P3(0)-V3(3)*P3(3))
     $ +P2(3)*(V3(3)*P3(1)-V3(4)*P3(0))))+P1(3)*(P2(0)*(V3(5)*P3(1)
     $ -V3(4)*P3(2))+(P2(1)*(V3(3)*P3(2)-V3(5)*P3(0))+P2(2)*(V3(4)
     $ *P3(0)-V3(3)*P3(1)))))))
      TMP30 = -1D0*(P1(0)*(P2(1)*(V3(6)*P3(2)-V3(5)*P3(3))+(P2(2)
     $ *(V3(4)*P3(3)-V3(6)*P3(1))+P2(3)*(V3(5)*P3(1)-V3(4)*P3(2))))
     $ +(P1(1)*(P2(0)*(V3(5)*P3(3)-V3(6)*P3(2))+(P2(2)*(V3(6)*P3(0)
     $ -V3(3)*P3(3))+P2(3)*(V3(3)*P3(2)-V3(5)*P3(0))))+(P1(2)*(P2(0)
     $ *(V3(6)*P3(1)-V3(4)*P3(3))+(P2(1)*(V3(3)*P3(3)-V3(6)*P3(0))
     $ +P2(3)*(V3(4)*P3(0)-V3(3)*P3(1))))+P1(3)*(P2(0)*(V3(4)*P3(2)
     $ -V3(5)*P3(1))+(P2(1)*(V3(5)*P3(0)-V3(3)*P3(2))+P2(2)*(V3(3)
     $ *P3(1)-V3(4)*P3(0)))))))
      TMP37 = -1D0*(P1(0)*(P2(1)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+P2(3)*(P3(1)*V2(5)-P3(2)*V2(4))))
     $ +(P1(1)*(P2(0)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)*(P3(0)*V2(6)
     $ -P3(3)*V2(3))+P2(3)*(P3(2)*V2(3)-P3(0)*V2(5))))+(P1(2)*(P2(0)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+(P2(1)*(P3(3)*V2(3)-P3(0)*V2(6))
     $ +P2(3)*(P3(0)*V2(4)-P3(1)*V2(3))))+P1(3)*(P2(0)*(P3(2)*V2(4)
     $ -P3(1)*V2(5))+(P2(1)*(P3(0)*V2(5)-P3(2)*V2(3))+P2(2)*(P3(1)
     $ *V2(3)-P3(0)*V2(4)))))))
      TMP36 = -1D0*(P1(0)*(P2(1)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+P2(3)*(P3(2)*V2(4)-P3(1)*V2(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)*(P3(3)*V2(3)
     $ -P3(0)*V2(6))+P2(3)*(P3(0)*V2(5)-P3(2)*V2(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+(P2(1)*(P3(0)*V2(6)-P3(3)*V2(3))
     $ +P2(3)*(P3(1)*V2(3)-P3(0)*V2(4))))+P1(3)*(P2(0)*(P3(1)*V2(5)
     $ -P3(2)*V2(4))+(P2(1)*(P3(2)*V2(3)-P3(0)*V2(5))+P2(2)*(P3(0)
     $ *V2(4)-P3(1)*V2(3)))))))
      TMP35 = (V3(3)*V1(3)-V3(4)*V1(4)-V3(5)*V1(5)-V3(6)*V1(6))
      TMP34 = -1D0*(P1(0)*(P2(1)*(P3(3)*V2(5)-P3(2)*V2(6))+(P2(2)
     $ *(P3(1)*V2(6)-P3(3)*V2(4))+P2(3)*(P3(2)*V2(4)-P3(1)*V2(5))))
     $ +(P1(1)*(P2(0)*(P3(2)*V2(6)-P3(3)*V2(5))+(P2(2)*(P3(3)*V2(3)
     $ -P3(0)*V2(6))+P2(3)*(P3(0)*V2(5)-P3(2)*V2(3))))+(P1(2)*(P2(0)
     $ *(P3(3)*V2(4)-P3(1)*V2(6))+(P2(1)*(P3(0)*V2(6)-P3(3)*V2(3))
     $ +P2(3)*(P3(1)*V2(3)-P3(0)*V2(4))))+P1(3)*(P2(0)*(P3(1)*V2(5)
     $ -P3(2)*V2(4))+(P2(1)*(P3(2)*V2(3)-P3(0)*V2(5))+P2(2)*(P3(0)
     $ *V2(4)-P3(1)*V2(3)))))))
      TMP9 = -1D0*(P1(0)*(V1(4)*(V3(6)*V2(5)-V3(5)*V2(6))+(V1(5)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+V1(6)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P1(1)*(V1(3)*(V3(5)*V2(6)-V3(6)*V2(5))+(V1(5)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+V1(6)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P1(2)*(V1(3)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(V1(4)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +V1(6)*(V3(4)*V2(3)-V3(3)*V2(4))))+P1(3)*(V1(3)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(V1(4)*(V3(5)*V2(3)-V3(3)*V2(5))+V1(5)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP8 = (P1(0)*P3(0)-P1(1)*P3(1)-P1(2)*P3(2)-P1(3)*P3(3))
      TMP5 = -1D0*(P3(0)*(V1(4)*(V3(6)*V2(5)-V3(5)*V2(6))+(V1(5)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+V1(6)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P3(1)*(V1(3)*(V3(5)*V2(6)-V3(6)*V2(5))+(V1(5)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+V1(6)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P3(2)*(V1(3)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(V1(4)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +V1(6)*(V3(4)*V2(3)-V3(3)*V2(4))))+P3(3)*(V1(3)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(V1(4)*(V3(5)*V2(3)-V3(3)*V2(5))+V1(5)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP7 = -1D0*(P2(0)*(V1(4)*(V3(6)*V2(5)-V3(5)*V2(6))+(V1(5)
     $ *(V3(4)*V2(6)-V3(6)*V2(4))+V1(6)*(V3(5)*V2(4)-V3(4)*V2(5))))
     $ +(P2(1)*(V1(3)*(V3(5)*V2(6)-V3(6)*V2(5))+(V1(5)*(V3(6)*V2(3)
     $ -V3(3)*V2(6))+V1(6)*(V3(3)*V2(5)-V3(5)*V2(3))))+(P2(2)*(V1(3)
     $ *(V3(6)*V2(4)-V3(4)*V2(6))+(V1(4)*(V3(3)*V2(6)-V3(6)*V2(3))
     $ +V1(6)*(V3(4)*V2(3)-V3(3)*V2(4))))+P2(3)*(V1(3)*(V3(4)*V2(5)
     $ -V3(5)*V2(4))+(V1(4)*(V3(5)*V2(3)-V3(3)*V2(5))+V1(5)*(V3(3)
     $ *V2(4)-V3(4)*V2(3)))))))
      TMP6 = (P1(0)*P2(0)-P1(1)*P2(1)-P1(2)*P2(2)-P1(3)*P2(3))
      VERTEX = COUP*-1D0*(TMP29*(-CI*(TMP31+TMP33)+CI*(TMP30+TMP32))
     $ +(TMP35*(-CI*(TMP34+TMP36)+CI*(TMP37+TMP38))+(TMP39*(-CI*(TMP41
     $ +TMP43)+CI*(TMP40+TMP42))+(TMP12*2D0*(-CI*(TMP11)+CI*(TMP13))
     $ +(TMP15*2D0*(-CI*(TMP14)+CI*(TMP16))+(TMP17*2D0*(-CI*(TMP19)
     $ +CI*(TMP18))+(TMP20*2D0*(-CI*(TMP21)+CI*(TMP22))+(TMP24*2D0*(
     $ -CI*(TMP25)+CI*(TMP23))+(TMP27*2D0*(-CI*(TMP28)+CI*(TMP26))+(
     $ +4D0 * CI*(TMP5*TMP6+TMP7*TMP8+TMP9*TMP10)))))))))))
      END


C     This File is Automatically generated by ALOHA 
C     The process calculated in this file is: 
C     4*Epsilon(1,2,3,-2)*P(-2,3)*P(-1,1)*P(-1,2) + 4*Epsilon(1,2,3,-2)
C     *P(-2,2)*P(-1,1)*P(-1,3) + 4*Epsilon(1,2,3,-2)*P(-2,1)*P(-1,2)*P(
C     -1,3) - 2*Epsilon(2,3,-1,-2)*P(-2,3)*P(-1,1)*P(1,2) + 2*Epsilon(2
C     ,3,-1,-2)*P(-2,1)*P(-1,3)*P(1,2) - 2*Epsilon(2,3,-1,-2)*P(-2,2)*P
C     (-1,1)*P(1,3) + 2*Epsilon(2,3,-1,-2)*P(-2,1)*P(-1,2)*P(1,3) +
C      2*Epsilon(1,3,-1,-2)*P(-2,3)*P(-1,2)*P(2,1) - 2*Epsilon(1,3,-1,-
C     2)*P(-2,2)*P(-1,3)*P(2,1) - 2*Epsilon(1,3,-1,-2)*P(-2,2)*P(-1,1)*
C     P(2,3) + 2*Epsilon(1,3,-1,-2)*P(-2,1)*P(-1,2)*P(2,3) + 2*Epsilon(
C     1,2,-1,-2)*P(-2,3)*P(-1,2)*P(3,1) - 2*Epsilon(1,2,-1,-2)*P(-2,2)*
C     P(-1,3)*P(3,1) + 2*Epsilon(1,2,-1,-2)*P(-2,3)*P(-1,1)*P(3,2) -
C      2*Epsilon(1,2,-1,-2)*P(-2,1)*P(-1,3)*P(3,2) + Epsilon(3,-1,-2,-3
C     )*P(-3,3)*P(-2,2)*P(-1,1)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,
C     3)*P(-2,1)*P(-1,2)*Metric(1,2) + Epsilon(3,-1,-2,-3)*P(-3,2)*P(-2
C     ,1)*P(-1,3)*Metric(1,2) - Epsilon(3,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-
C     1,3)*Metric(1,2) - Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Me
C     tric(1,3) - Epsilon(2,-1,-2,-3)*P(-3,3)*P(-2,1)*P(-1,2)*Metric(1,
C     3) + Epsilon(2,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(1,3) +
C      Epsilon(2,-1,-2,-3)*P(-3,2)*P(-2,1)*P(-1,3)*Metric(1,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,3)*P(-2,2)*P(-1,1)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,2)*P(-2,3)*P(-1,1)*Metric(2,3) +
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,3)*P(-1,2)*Metric(2,3) -
C      Epsilon(1,-1,-2,-3)*P(-3,1)*P(-2,2)*P(-1,3)*Metric(2,3)
C     
      SUBROUTINE VVV10_2_3_4_7_8_9_0(V1, V2, V3, COUP1, COUP2, COUP3
     $ , COUP4, COUP5, COUP6, COUP7,VERTEX)
      IMPLICIT NONE
      COMPLEX*16 CI
      PARAMETER (CI=(0D0,1D0))
      COMPLEX*16 COUP6
      REAL*8 P3(0:3)
      COMPLEX*16 TMP
      COMPLEX*16 V3(*)
      REAL*8 P2(0:3)
      COMPLEX*16 COUP1
      COMPLEX*16 COUP3
      COMPLEX*16 COUP4
      COMPLEX*16 V2(*)
      REAL*8 P1(0:3)
      COMPLEX*16 COUP5
      COMPLEX*16 VERTEX
      COMPLEX*16 V1(*)
      COMPLEX*16 COUP2
      COMPLEX*16 COUP7
      CALL VVV10_0(V1,V2,V3,COUP1,VERTEX)
      CALL VVV2_0(V1,V2,V3,COUP2,TMP)
      VERTEX = VERTEX + TMP
      CALL VVV3_0(V1,V2,V3,COUP3,TMP)
      VERTEX = VERTEX + TMP
      CALL VVV4_0(V1,V2,V3,COUP4,TMP)
      VERTEX = VERTEX + TMP
      CALL VVV7_0(V1,V2,V3,COUP5,TMP)
      VERTEX = VERTEX + TMP
      CALL VVV8_0(V1,V2,V3,COUP6,TMP)
      VERTEX = VERTEX + TMP
      CALL VVV9_0(V1,V2,V3,COUP7,TMP)
      VERTEX = VERTEX + TMP
      END


