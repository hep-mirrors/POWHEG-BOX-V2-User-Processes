#if 0
* CalcRenConst.F
* renormalization constants
* generated by FormCalc 7.5 on 27-Mar-2015 20:06
#endif

#include "decl.h"


	subroutine CalcRenConst
	implicit none

#include "decl.h"

	integer Gen3, Gen4, gn10

	ComplexType dup1, dup2, dup3, dup4

        dMWsq1 = 0.d0
        dMZsq1 = 0.d0
	dZAA1 = 0.d0
	dZZA1 = 0.d0
	dSW1 = 0.d0
	dZAZ1 = 0.d0
	dZe1 = 0.d0
        dZW1 = 0.d0
        dZZZ1 = 0.d0

c-- mass counterterms, here zero as MQ = 0 is used for light quarks

        dMf1(3,1) = 0.d0
#ifdef DEBUG
	DEB("dMf1(3,1) =", dMf1(3,1))
#endif

        dMf1(3,2) = 0.d0
#ifdef DEBUG
	DEB("dMf1(3,1) =", dMf1(3,1))
#endif

        dMf1(4,1) = 0.d0
#ifdef DEBUG
	DEB("dMf1(4,1) =", dMf1(4,1))
#endif

        dMf1(4,2) = 0.d0

#ifdef DEBUG
	DEB("dMf1(4,2) =", dMf1(4,2))
#endif

c-- common wave-function counterterms set to zero
	dZfL1(3,1,2) = 0
	dZfL1(3,1,3) = 0
	dZfL1(3,2,1) = 0
	dZfL1(3,2,3) = 0
	dZfL1(3,3,1) = 0
	dZfL1(3,3,2) = 0
	dZfL1(4,1,2) = 0
	dZfL1(4,1,3) = 0
	dZfL1(4,2,1) = 0
	dZfL1(4,2,3) = 0
	dZfL1(4,3,1) = 0
	dZfL1(4,3,2) = 0

	dZfR1(3,1,2) = 0
	dZfR1(3,1,3) = 0
	dZfR1(3,2,1) = 0
	dZfR1(3,2,3) = 0
	dZfR1(3,3,1) = 0
	dZfR1(3,3,2) = 0
	dZfR1(4,1,2) = 0
	dZfR1(4,1,3) = 0
	dZfR1(4,2,1) = 0
	dZfR1(4,2,3) = 0
	dZfR1(4,3,1) = 0
	dZfR1(4,3,2) = 0


c-- d + ubar / dbar + u:
	dup1 = Re(B0i(bb0,MU2,0.D0,MU2)) + Re(B0i(bb1,MU2,0.D0,MU2))
	
	dup2 = Alfas*(-(2/(3.D0*Pi)*dup1) + 1/(3.D0*Pi)*Finite*0.d0 + 
     &         MU2*(4/(3.D0*Pi)*Re(B0i(dbb0,MU2,0.D0,MU2)) - 
     &         4/(3.D0*Pi)*Re(B0i(dbb1,MU2,0.D0,MU2))))

	dZfL1(3,1,1) = dup2

#ifdef DEBUG
	DEB("dZfL1(3,1,1) =", dZfL1(3,1,1))
#endif

	dup3 = Re(B0i(bb0,MD2,0.D0,MD2)) + Re(B0i(bb1,MD2,0.D0,MD2))

	dup4 = Alfas*(-(2/(3.D0*Pi)*dup3) + 1/(3.D0*Pi)*Finite*0.d0 + 
     &      MD2*(4/(3.D0*Pi)*Re(B0i(dbb0,MD2,0.D0,MD2)) - 
     &         4/(3.D0*Pi)*Re(B0i(dbb1,MD2,0.D0,MD2))))

	dZfL1(4,1,1) = dup4
	   
#ifdef DEBUG
	DEB("dZfL1(4,1,1) =", dZfL1(4,1,1))
#endif

	dZfR1(3,1,1) = dup2

#ifdef DEBUG
	DEB("dZfR1(3,1,1) =", dZfR1(3,1,1))
#endif

	dZfR1(4,1,1) = dup4

#ifdef DEBUG
	DEB("dZfR1(4,1,1) =", dZfR1(4,1,1))
#endif

	dCKM1(1,1) = 0
	   
	LOOP(gn10, 1,3,1)

	dCKM1(1,1) = dCKM1(1,1) + 
     &    1/4.D0*(CKM(gn10,1)*
     &        (-Conjugate(dZfL1(3,gn10,1)) + dZfL1(3,1,gn10)) - 
     &       CKM(1,gn10)*(-Conjugate(dZfL1(4,1,gn10)) + 
     &          dZfL1(4,gn10,1)))

	ENDLOOP(gn10)

#ifdef DEBUG
	DEB("dCKM1(1,1) =", dCKM1(1,1))
#endif

c-- s + ubar / sbar + u:
	dup3 = Re(B0i(bb0,MS2,0.D0,MS2)) + Re(B0i(bb1,MS2,0.D0,MS2))

        dup4 = Alfas*(-(2/(3.D0*Pi)*dup3) + 1/(3.D0*Pi)*Finite*0.d0 + 
     &      MS2*(4/(3.D0*Pi)*Re(B0i(dbb0,MS2,0.D0,MS2)) - 
     &         4/(3.D0*Pi)*Re(B0i(dbb1,MS2,0.D0,MS2))))

	dZfL1(4,2,2) = dup4

#ifdef DEBUG
	DEB("dZfL1(4,2,2) =", dZfL1(4,2,2))
#endif

	dZfR1(4,2,2) = dup4

#ifdef DEBUG
	DEB("dZfR1(4,2,2) =", dZfR1(4,2,2))
#endif

	dCKM1(1,2) = 0

	LOOP(gn10, 1,3,1)

        dCKM1(1,2) = dCKM1(1,2) + 
     &    1/4.D0*(CKM(gn10,2)*
     &        (-Conjugate(dZfL1(3,gn10,1)) + dZfL1(3,1,gn10)) - 
     &       CKM(1,gn10)*(-Conjugate(dZfL1(4,2,gn10)) + 
     &          dZfL1(4,gn10,2)))

	ENDLOOP(gn10)

#ifdef DEBUG
	DEB("dCKM1(1,2) =", dCKM1(1,2))
#endif


c-- d + cbar / dbar + c:
	dup1 = Re(B0i(bb0,MC2,0.D0,MC2)) + Re(B0i(bb1,MC2,0.D0,MC2))

        dup2 = Alfas*(-(2/(3.D0*Pi)*dup1) + 1/(3.D0*Pi)*Finite*0.d0 + 
     &      MC2*(4/(3.D0*Pi)*Re(B0i(dbb0,MC2,0.D0,MC2)) - 
     &         4/(3.D0*Pi)*Re(B0i(dbb1,MC2,0.D0,MC2))))

	dZfL1(3,2,2) = dup2

#ifdef DEBUG
	DEB("dZfL1(3,2,2) =", dZfL1(3,2,2))
#endif

	dZfR1(3,2,2) = dup2

#ifdef DEBUG
	DEB("dZfR1(3,2,2) =", dZfR1(3,2,2))
#endif

	dCKM1(2,1) = 0

	LOOP(gn10, 1,3,1)

        dCKM1(2,1) = dCKM1(2,1) + 
     &    1/4.D0*(CKM(gn10,1)*
     &        (-Conjugate(dZfL1(3,gn10,2)) + dZfL1(3,2,gn10)) - 
     &       CKM(2,gn10)*(-Conjugate(dZfL1(4,1,gn10)) + 
     &          dZfL1(4,gn10,1)))

	ENDLOOP(gn10)

#ifdef DEBUG
	DEB("dCKM1(2,1) =", dCKM1(2,1))
#endif


c-- s + cbar / sbar + c:
	dCKM1(2,2) = 0

	LOOP(gn10, 1,3,1)

        dCKM1(2,2) = dCKM1(2,2) + 
     &    1/4.D0*(CKM(gn10,2)*
     &        (-Conjugate(dZfL1(3,gn10,2)) + dZfL1(3,2,gn10)) - 
     &       CKM(2,gn10)*(-Conjugate(dZfL1(4,2,gn10)) + 
     &          dZfL1(4,gn10,2)))

	ENDLOOP(gn10)

#ifdef DEBUG
	DEB("dCKM1(2,2) =", dCKM1(2,2))
#endif

	end
