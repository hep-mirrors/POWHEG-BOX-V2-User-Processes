*#define CHECK

#if 0
* SquaredME.F
* assembly of squared matrix element
* generated by FormCalc 7.5 on 27-Mar-2015 19:54
#endif

#include "subar_vars.h"

************************************************************************

	RealType function subar_sumup(CCloop, CCtree)
	implicit none

#include "subar_vars.h"

	ComplexType CCloop(1), CCtree(1)
	ComplexType m

	subar_sumup = 0

	m = 0
	m = m + CCloop(1)*MatSUN(1,1)
	subar_sumup = subar_sumup + Re(Conjugate(CCtree(1))*m)
	end

************************************************************************

	subroutine subar_SquaredMEHel(result, flags)
	implicit none
	RealType result(*)
	integer flags

#include "subar_vars.h"

	RealType subar_sumup
	external subar_sumup

* BEGIN ABBR_HEL
	call subar_abbr0hel
	TEST(flags, BIT_LOOP)
	call subar_abbr1hel
	ENDTEST(flags, BIT_LOOP)
* END ABBR_HEL

* BEGIN FF_INI
	Ctree(1) = 0

	Cloop(1) = 0
* END FF_INI

* BEGIN FF_TREE
	call subar_born

	result(1) = result(1) + subar_sumup(Ctree, Ctree)
* END FF_TREE

	TEST(flags, BIT_LOOP)
* BEGIN FF_LOOP
	call subar_self
	call subar_vert
	call subar_box

	LOOP(Gen6, 1,3,1)
	call subar_self_Gen6
	call subar_vert_Gen6
	ENDLOOP(Gen6)

	LOOP(Ind1, 1,3,1)
	call subar_vert_Ind1
	ENDLOOP(Ind1)

	result(2) = result(2) + 2*subar_sumup(Cloop, Ctree)
* END FF_LOOP
	ENDTEST(flags, BIT_LOOP)
	end

************************************************************************

	subroutine subar_SquaredME(result, helicities, flags)
	implicit none
	RealType result(*)
	integer*8 helicities
	integer flags

#include "subar_vars.h"

* BEGIN VARDECL
	external subar_SquaredMEHel

	integer Hel1, Hel2, Hel3, Hel4, Hel5
	equivalence (Hel(1), Hel1)
	equivalence (Hel(2), Hel2)
	equivalence (Hel(3), Hel3)
	equivalence (Hel(4), Hel4)
	equivalence (Hel(5), Hel5)

	data MatSUN /1*bogus/
* END VARDECL

#include "inline.h"

* BEGIN INVARIANTS
	S = SInvariant(k(1),k(2))
	T = TInvariant(k(1),k(3))
	T14 = TInvariant(k(1),k(4))
	U = TInvariant(k(2),k(3))
	T24 = TInvariant(k(2),k(4))
	S34 = SInvariant(k(3),k(4))
* END INVARIANTS

	TEST(flags, BIT_RESET)
* BEGIN ABBR_S
	call subar_abbr0s
	TEST(flags, BIT_LOOP)
	call subar_abbr1s
	ENDTEST(flags, BIT_LOOP)
* END ABBR_S
	ENDTEST(flags, BIT_RESET)

* BEGIN ABBR_ANGLE
	call subar_abbr0angle
	TEST(flags, BIT_LOOP)
	call subar_abbr1angle
	ENDTEST(flags, BIT_LOOP)
* END ABBR_ANGLE

* BEGIN RES_INI
	result(1) = 0
	result(2) = 0
* END RES_INI

* BEGIN HEL_LOOPS
	LOOP_HEL(Hel1)
	TEST(helicities, BIT_HEL(1))

	LOOP_HEL(Hel2)
	TEST(helicities, BIT_HEL(2))

	LOOP_HEL(Hel3)
	TEST(helicities, BIT_HEL(3))

	LOOP_HEL(Hel4)
	TEST(helicities, BIT_HEL(4))

	LOOP_HEL(Hel5)
	TEST(helicities, BIT_HEL(5))

	EXEC(subar_SquaredMEHel, result, flags)

	ENDTEST(helicities, BIT_HEL(5))
	ENDLOOP_HEL(Hel5)

	ENDTEST(helicities, BIT_HEL(4))
	ENDLOOP_HEL(Hel4)

	ENDTEST(helicities, BIT_HEL(3))
	ENDLOOP_HEL(Hel3)

	ENDTEST(helicities, BIT_HEL(2))
	ENDLOOP_HEL(Hel2)

	ENDTEST(helicities, BIT_HEL(1))
	ENDLOOP_HEL(Hel1)
* END HEL_LOOPS

#ifdef CHECK
	print *, 'S =', S
	print *, 'T =', T
	print *, 'T14 =', T14
	print *, 'U =', U
	print *, 'T24 =', T24
	print *, 'S34 =', S34
	print *, 'tree =', result(1)
	print *, 'loop =', result(2)
	stop
#endif

* END SQUAREDME
	end

