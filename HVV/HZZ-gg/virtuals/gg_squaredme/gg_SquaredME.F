*#define CHECK

#if 0
* gg_SquaredME.F
* assembly of squared matrix element
* generated by FormCalc 8.4 on 9-Sep-2016 18:40
#endif

#include "gg_vars.h"
#include "inline.h"
#include "contains.h"


************************************************************************

	subroutine gg_SquaredMEHel(res, flags)
	implicit none
	ResType res(HelDim(*))
	integer flags

#include "gg_vars.h"

	HelType amp
	ResType ampsq

* BEGIN ABBR_HEL
	TEST(flags, BIT_LOOP)
	call gg_abbr1h1
	call gg_abbr1h2
	call gg_abbr1h3
	call gg_abbr1h4
	call gg_abbr1h5
	call gg_abbr1h6
	call gg_abbr1h7
	call gg_abbr1h8
	call gg_abbr1h9
	call gg_abbr1h10
	call gg_abbr1h11
	call gg_abbr1h12
	call gg_abbr1h13
	call gg_abbr1h14
	call gg_abbr1h15
	call gg_abbr1h16
	call gg_abbr1h17
	call gg_abbr1h18
	call gg_abbr1h19
	call gg_abbr1h20
	call gg_abbr1h21
	call gg_abbr1h22
	call gg_abbr1h23
	call gg_abbr1h24
	call gg_abbr1h25
	call gg_abbr1h26
	call gg_abbr1h27
	call gg_abbr1h28
	ENDTEST(flags, BIT_LOOP)
* END ABBR_HEL

	ampsq = 0
	res(HelInd(1)) = ampsq

	ampsq = 0
	TEST(flags, BIT_LOOP)
* BEGIN FF_LOOP
	Cloop(HelInd(1)) = 0

	call gg_vertnonres
	call gg_vertres
	call gg_box1
	call gg_box2
	call gg_box3nonres
	call gg_box3res
	call gg_pent
* END FF_LOOP

* BEGIN M2_LOOP
	amp = 0
	amp = amp + MatSUN(1,1)*Cloop(HelInd(1))
	ampsq = ampsq + Re(Conjugate(Cloop(HelInd(1)))*amp)
* END M2_LOOP
	ENDTEST(flags, BIT_LOOP)
	res(HelInd(2)) = ampsq
	end

************************************************************************

	subroutine gg_SquaredME(result, helicities, flags)
	implicit none
	RealType result(*)
	integer*8 helicities
	integer flags

#include "gg_vars.h"

* BEGIN VAR_DECL
	SIMD_ONLY(integer v)
	integer i, h, hmax, hsimd
	parameter (hmax = 36)
	parameter (hsimd = SIMD_CEIL(hmax))
	integer*8 hbits
	ResType res(HelDim(2),hsimd)
	RealType rtree, rloop
	external gg_SquaredMEHel
* END VAR_DECL

* BEGIN HSEL_DECL
	RealType norm
	ResType hseltest_v(HelDim(hsimd))
	RealType hseltest_s(0:hmax-1)
	equivalence (hseltest_v, hseltest_s)
	RealType hselmin
	integer hseli
	save hseltest_v, hselmin, hseli
* END HSEL_DECL

	data MatSUN /1*bogus/

#include "inline.h"

	PAR_PREP(res,res(HelInd(1),2), Sub22,ends, Eps118,enda, seq,endhel)

* BEGIN INVARIANTS
	S = SInvariant(1,2)
	T = TInvariant(1,3)
	T14 = TInvariant(1,4)
	U = TInvariant(2,3)
	T24 = TInvariant(2,4)
	S34 = SInvariant(3,4)
* END INVARIANTS

	TEST(flags, BIT_RESET)
* BEGIN ABBR_S
	seq(1) = seq(1) + 1
	INI_S(seq)
	TEST(flags, BIT_LOOP)
	call gg_abbr1s
	ENDTEST(flags, BIT_LOOP)
* END ABBR_S
	ENDTEST(flags, BIT_RESET)

* BEGIN ABBR_ANGLE
	seq(2) = seq(2) + 1
	INI_ANGLE(seq)
	TEST(flags, BIT_LOOP)
	call gg_abbr1a
	ENDTEST(flags, BIT_LOOP)
* END ABBR_ANGLE

* BEGIN HEL_LOOP
	SIMD_ONLY(v = 1)
	h = 0

	do i = 0, hmax - 1
* BEGIN HSEL_IF
	  if( hseltest_s(i) .lt. hselmin ) cycle
* END HSEL_IF

	  Hel(1) = -1 + 2*Mod(i/18,2)
	  Hel(2) = -1 + 2*Mod(i/9,2)
	  Hel(3) = 0
	  Hel(4) = -1 + Mod(i/3,3)
	  Hel(5) = -1 + Mod(i/1,3)
	  hbits =
     &      + MASK_HEL(1)
     &      + MASK_HEL(2)
     &      + MASK_HEL(3)
     &      + MASK_HEL(4)
     &      + MASK_HEL(5)
	  if( iand(helicities, hbits) .ne. hbits ) cycle

	  SIMD_ONLY(call VecCopy(v, LEGS, Hel(1)))
	  SIMD_MULT(v = mod(v, SIMD) + 1)
	  SIMD_MULT(if( v .eq. 1 ) then)
	  h = h + 1
	  PAR_EXEC(gg_SquaredMEHel, res(HelInd(1),h), flags)
	  SIMD_MULT(endif)
	enddo

	SIMD_MULT(if( v .ne. 1 ) then)
	SIMD_MULT(h = h + 1)
	SIMD_MULT(PAR_EXEC(gg_SquaredMEHel, res(HelInd(1),h), flags))
	SIMD_MULT(endif)
* END HEL_LOOP

	PAR_SYNC()
	DEINI(seq)

	SIMD_MULT(if( v .ne. 1 ) res(v:SIMD,:,h) = 0)
* BEGIN RESULT
	rtree = 0
	rloop = 0
	do i = 1, h
	  rtree = rtree + HelSum(res(HelInd(1),i))
	  rloop = rloop + HelSum(res(HelInd(2),i))
	enddo
	result(1) = rtree
	TEST(flags, BIT_LOOP)
#ifdef WF_RENORMALIZATION
	rloop = rloop + (WF_RENORMALIZATION)*rtree
#endif
	result(2) = rloop
	ENDTEST(flags, BIT_LOOP)
* END RESULT

* BEGIN HSEL_SET
	if( hseli .lt. hseln ) then
	  norm = 1/(rtree + rloop)
	  do i = 1, hsimd
	    hseltest_v(HelInd(i)) = hseltest_v(HelInd(i)) +
     &        abs(norm*(res(HelInd(1),i) + res(HelInd(2),i)))
	  enddo
	  hseli = hseli + 1
	  if( hseli .eq. hseln ) then
	    hselmin = 0
	    do i = 0, hmax - 1
	      hselmin = max(hselmin, hseltest_s(i))
	    enddo
	    hselmin = hselmin*hseleps
	    do i = 0, hmax - 1
	      if( hseltest_s(i) .ge. hselmin ) cycle
	      Hel(1) = -1 + 2*Mod(i/18,2)
	      Hel(2) = -1 + 2*Mod(i/9,2)
	      Hel(3) = 0
	      Hel(4) = -1 + Mod(i/3,3)
	      Hel(5) = -1 + Mod(i/1,3)
	      print 123, Hel
123	      format(' neglecting ', LEGS I3)
	    enddo
	  endif
	endif
* END HSEL_SET

#ifdef CHECK
	print *, 'S =', S
	print *, 'T =', T
	print *, 'T14 =', T14
	print *, 'U =', U
	print *, 'T24 =', T24
	print *, 'S34 =', S34
	print *, 'tree =', rtree
	print *, 'loop =', rloop
	stop
#endif

#include "contains.h"
* END SQUAREDME
	end

