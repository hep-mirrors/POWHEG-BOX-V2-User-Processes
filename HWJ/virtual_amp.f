c     This subroutine computes the analytical amplitude for the interference
c     of the Born amplitude with diagrams not containing massive quark loops
      subroutine virt_amp_massless_quarks(p,amp_massless)
      implicit none
      include 'nlegborn.h'
      include 'PhysPars.h'
      include 'pwhg_math.h'
      real * 8 p(0:3,nlegborn)
      complex * 16 amp_massless
      real * 8 p1(0:3),p2(0:3),p4(0:3),p5(0:3),p6(0:3)
      real * 8 p12,p14,p15,p16,p24,p25,p26,p45,p46,p56
      real * 8 q(0:3),qp(0:3),q2,qp2,c1,c2,c3
      complex *16 s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15
      complex *16 s16,s17,s18,e1245,e1265,e2645,e1645,e1264
      real * 8 dotp,epsilon
      external dotp,epsilon
      complex * 16 B0_1,B0_2,B0_3,B0_4,C0_1,C0_2,C0_3,C0_4,C0_5,C0_6,
     $     D0_1,D0_2,D0_3
      complex * 16 B0_FG,C0_FG,D0_FG
      external B0_FG,C0_FG,D0_FG

      p1 = p(:,1)
      p2 = p(:,2)
      p4 = p(:,4)
      p5 = p(:,5)
      p6 = p(:,6)

      q=p1+p2-p6
      qp=p4+p5
      q2=dotp(q,q)
      qp2=dotp(qp,qp)

      p12=dotp(p1,p2)
      p14=dotp(p1,p4)
      p15=dotp(p1,p5)
      p16=dotp(p1,p6)
      p24=dotp(p2,p4)
      p25=dotp(p2,p5)
      p26=dotp(p2,p6)
      p45=dotp(p4,p5)
      p46=dotp(p4,p6)
      p56=dotp(p5,p6)

      B0_1 = B0_FG(p1-p6)
      B0_2 = B0_FG(p1+p2)
      B0_3 = B0_FG(p6-p2)
      B0_4 = B0_FG(-p2-p1+p6)
      C0_1 = C0_FG(p1,p2)
      C0_2 = C0_FG(p1,-p6)
      C0_3 = C0_FG(p1,-p2-p1+p6)
      C0_4 = C0_FG(-p6,-p2-p1+p6)
      C0_5 = C0_FG(-p6,p2)
      C0_6 = C0_FG(p2,-p2-p1+p6)
      D0_1 = D0_FG(p1,p2,-p6)
      D0_2 = D0_FG(p2,-p6,p1)
      D0_3 = D0_FG(p2,p1,-p6)

      e1245 = cmplx(0d0,1d0)*epsilon(p1,p2,p4,p5)
      e1265 = cmplx(0d0,1d0)*epsilon(p1,p2,p6,p5)
      e2645 = cmplx(0d0,1d0)*epsilon(p2,p6,p4,p5)
      e1645 = cmplx(0d0,1d0)*epsilon(p1,p6,p4,p5)
      e1264 = cmplx(0d0,1d0)*epsilon(p1,p2,p6,p4)

      c1 = CF-CA/2d0
      c2 = CA/2d0
      c3 = CF

      s2 = 64
      s8 = -2*p16*p15*(-p24*p16+2*p24*p12+p26*p14-p46*p12)+p16*e1265*p14
     #+p16*e1264*p15+e1645*p12*p16-e1245*p16**2
      s10 = (1/p16*B0_2-(p12+2*p16)*(p12-p16-p26)/p12/p16/(-p16+p12)*B0_
     #4-(p12+2*p16)*p26/p12/p16/(-p16+p12)*B0_3-(p12-2*p16)/p16/p12*B0_1
     #+p12*(p16**2+p26**2)/p16**2/p26*C0_1-(2*p26+p16)/p26*C0_2-(2*p16+p
     #26)*(-p16+p12)/p16**2*C0_3-(p16*p12-2*p26*p12+2*p26**2+3*p16*p26)/
     #p16/p26*C0_6-(2*p16+p26)*p26/p16**2*C0_5+(p16+p26)*(p26**2+p16**2+
     #4*p16*p26)/p16**2/p26*C0_4+2*p26*p12*(2*p16+p26)/p16**2*D0_1+2*p12
     #*(2*p26+p16)/p26*D0_3)*c1
      s11 = (-3/(-p16+p12)/p12*(p12-p16-p26)*B0_4-3/(-p16+p12)*p26/p12*B
     #0_3-(p12-3*p16)/p16/p12*B0_1+(2*p12**2+3*p16*p26)/p12**2*C0_2-(-p1
     #6+p12)*(2*p12**2-3*p16*p26)/p12**2/p16*C0_3+(2*p12**3-2*p12**2*p26
     #-4*p12**2*p16+3*p12*p16*p26-3*p26**2*p16)/p12**2/p16*C0_6+p26*(2*p
     #12**2+3*p16*p26)/p12**2/p16*C0_5-2*p26*(2*p12**2-3*p16*p26)/p12**2
     #*D0_2)*c2+(-3*(p12-p16-p26)/(-p26+p12)/p16*B0_4+(p12-3*p16-p26)/(-
     #p26+p12)/p16*B0_1-4*(p12-p16-p26)/p16*C0_6-1/p16)*c3
      s9 = s10+s11
      s7 = s8*s9
      s10 = 2*p26*(-p56*p14*p26**2+p26*p56*p46*p12+p26*p16*p24*p56-p45*p
     #16*p26*p12+p26*p14*p12*p56+p25*p46*p12*p16-p56*p46*p12**2)+p16*p26
     #*(p12+p26)*e2645+p56*p26*(-p26+p12)*e1264+p46*p26*(-p26+p12)*e1265
     #+p26**2*(-p26+p12)*e1645
      s11 = (-2*(-p26**2+2*p26*p12-p16*p26+p16*p12)/p26**2/(p16+p26)**2*
     #B0_2+(2*p12**2*p16+4*p12**2*p26-8*p12*p26**2-8*p12*p16*p26-2*p12*p
     #16**2+3*p26**3+p16**2*p26+4*p26**2*p16)/p26**2/(-p26+p12)/(p16+p26
     #)**2*B0_4+(2*p12-p26)/p26**2/(-p26+p12)*B0_1-2*p12**2/p26**3*C0_1+
     #2*p16*p12/p26**3*C0_2+2*(-p26+p12)*p12/p26**3*C0_6-2*p12*(p16+p26)
     #/p26**3*C0_4-4*p16*p12**2/p26**3*D0_3-2/(p16+p26)/p26)*c1+(-1/p26/
     #(-p26+p12)*B0_4+1/p26/(-p26+p12)*B0_1)*c2
      s9 = s10*s11
      s11 = 2*p15*p46*p26*p12-2*p15*p46*p16*p12-2*p14*p15*p26**2-2*p14*p
     #15*p16*p26-2*p45*p16*p26*p12+2*p25*p14*p16*p26+2*p15*p24*p16**2-p1
     #6*(p16+p26)*e1245+p15*(p16-p26)*e1264+p14*(p16-p26)*e1265+p12*(p16
     #-p26)*e1645
      s13 = (1/p16*B0_2-(p12**4-2*p26*p12**3-p16**2*p12**2+p12**2*p26**2
     #+p16*p12**2*p26-5*p12*p16**2*p26+p16*p12*p26**2+2*p16**3*p26+2*p16
     #**2*p26**2)/p12/p16/(-p26+p12)/(-p16+p12)**2*B0_4-p26*(p12**2+p16*
     #p12+2*p16**2)/p12/(-p16+p12)**2/p16*B0_3+2*p26/(-p26+p12)/p12*B0_1
     #+(p16+p26)**2*p12/p16**2/p26*C0_1-p16/p26*C0_2-(p16+p12)*(2*p16*p1
     #2+p26*p12-3*p16*p26-2*p16**2)/p16**2/(-p16+p12)*C0_3-(-p26+p12)/p2
     #6*C0_6-(2*p16+p26)*p26/p16**2*C0_5+(p16+p26)**3/p16**2/p26*C0_4+2*
     #p26*p12*(2*p16+p26)/p16**2*D0_1+2/p26*p16*p12*D0_3)*c1
      s14 = (-(p12**3-7*p12*p16*p26-p12*p16**2+p12*p26**2+3*p16**2*p26+3
     #*p26**2*p16)/(-p26+p12)/(-p16+p12)**2/p12*B0_4-p26*(p12+3*p16)/(-p
     #16+p12)**2/p12*B0_3-(p12-3*p26)/(-p26+p12)/p12*B0_1-3*p16*p26/p12*
     #*2*C0_2-(-4*p12**2*p16+4*p12**3-6*p12*p16*p26+3*p16**2*p26-p12**2*
     #p26)/p12**2/(-p16+p12)*C0_3-3*p26*(-p26+p12)/p12**2*C0_6-3*p26**2/
     #p12**2*C0_5-6*p26**2*p16/p12**2*D0_2)*c2+((5*p12**2-6*p16*p12-9*p2
     #6*p12+4*p16*p26+p16**2+5*p26**2)/(-p26+p12)/(-p16+p12)**2*B0_4-(-2
     #*p16-5*p26+2*p12)/(-p16+p12)**2*B0_3-1/(-p26+p12)*B0_1+4*(p12-p16-
     #p26)/(-p16+p12)*C0_3+1/(-p16+p12))*c3
      s12 = s13+s14
      s10 = s11*s12
      s8 = s9+s10
      s6 = s7+s8
      s8 = s6
      s10 = 2*p26*p16*p24*p56+2*p26*p56*p46*p12-2*p46*p56*p16*p12-2*p56*
     #p14*p26**2+2*p25*p46*p16**2-2*p15*p46*p16*p26+p16*(p16+p26)*e2645+
     #p56*(p16-p26)*e1264+p46*(p16-p26)*e1265-p26*(p16+p26)*e1645
      s14 = (p16-p26)*p12/p16/(p16+p26)/p26*B0_2-(p16-p26)*(p12*p16**2+p
     #16**2*p26-2*p12**2*p16+3*p12*p16*p26+p26**2*p16+p12**3+p12*p26**2-
     #2*p12**2*p26)/p16/p26/(-p26+p12)/(p16+p26)/(-p16+p12)*B0_4-(-p16*p
     #26-p16**2+p16*p12-p26*p12)/p16/(-p16+p12)/p26*B0_3-(p12+p26)/(-p26
     #+p12)/p26*B0_1+p12*(-2*p16**2*p26-p12*p26**2+p12*p16**2)/p16**2/p2
     #6**2*C0_1-p16*p12/p26**2*C0_2
      s13 = s14+(p12**2*p26-p12*p16*p26+2*p12*p16**2-4*p16**2*p26-2*p16*
     #*3)/p16**2/p26*C0_3-(-p26+p12)*p12/p26**2*C0_6+(p26*p12-2*p16**2)/
     #p16**2*C0_5+(p16+p26)*(-p12*p26**2+p12*p16**2+2*p16**2*p26)/p16**2
     #/p26**2*C0_4-2*p12*(p26*p12-2*p16**2)/p16**2*D0_1+2*p16/p26**2*p12
     #**2*D0_3-1/p26
      s14 = c1
      s12 = s13*s14
      s13 = (-2*(p16-p26)/(-p26+p12)/(-p16+p12)*B0_4-(-2*p26+p12-p16)/(-
     #p16+p12)/p26*B0_3-2/(-p26+p12)*B0_1+p16*(2*p12+3*p26)/p26/p12*C0_2
     #+(2*p12**2-2*p16*p12-p26*p12-3*p16*p26)/p26/p12*C0_3-(-p26+p12)*(2
     #*p12-3*p26)/p26/p12*C0_6+(2*p12+3*p26)/p12*C0_5-2*p16*(2*p12-3*p26
     #)/p12*D0_2+1/p26)*c2+(-(3*p12**2-3*p16*p12-6*p26*p12+2*p16*p26+4*p
     #26**2)/(-p26+p12)/(-p16+p12)/p26*B0_4+(p12-4*p26-p16)/(-p16+p12)/p
     #26*B0_3+1/(-p26+p12)*B0_1-4*(p12-p16-p26)/p26*C0_3-1/p26)*c3
      s11 = s12+s13
      s9 = s10*s11
      s7 = s8+s9
      s8 = s7
      s11 = -2*p15*p46*p26*p12-2*p46*p56*p16*p12+2*p15*p46*p16*p26-2*p56
     #*p14*p26**2+2*p26*p56*p46*p12-2*p26*p16*p24*p56+2*p25*p46*p16**2+2
     #*p56*p24*p16*p12-2*p16**2*p24*p25+2*p14*p15*p26**2-p16*(p12-p16-p2
     #6)*e2645-2*p16*p26*e1245-(p16*p25+p26*p56-p16*p56-p26*p15)*e1264-(
     #-p16*p46+p26*p46-p26*p14+p24*p16)*e1265+p26*(p12-p16-p26)*e1645
      s13 = ((p16-p26)*p12/p16/(p16+p26)/p26*B0_2-(p16-p26)*(p12-p16-p26
     #)/p16/(p16+p26)/p26*B0_4+(p16+p26)/p16/p26*B0_3-1/p26*B0_1+p12*(-p
     #12*p26**2+p12*p16**2+2*p16**2*p26)/p16**2/p26**2*C0_1-p16*p12/p26*
     #*2*C0_2+(p12**2*p26-2*p12*p16**2-p12*p16*p26+4*p16**2*p26+2*p16**3
     #)/p16**2/p26*C0_3-(-p26+p12)*p12/p26**2*C0_6+(p26*p12+2*p16**2)/p1
     #6**2*C0_5+(p16+p26)*(-2*p16**2*p26-p12*p26**2+p12*p16**2)/p16**2/p
     #26**2*C0_4-2*p12*(p26*p12+2*p16**2)/p16**2*D0_1+2*p16/p26**2*p12**
     #2*D0_3+1/p26)*c1
      s14 = (1/p26*B0_3-p16*(2*p12+3*p26)/p26/p12*C0_2-(2*p12**2-2*p16*p
     #12-p26*p12-3*p16*p26)/p26/p12*C0_3+(-p26+p12)*(2*p12-3*p26)/p26/p1
     #2*C0_6-(2*p12+3*p26)/p12*C0_5+2*p16*(2*p12-3*p26)/p12*D0_2-1/p26)*
     #c2+(3*(p12-p16-p26)/(-p16+p12)/p26*B0_4-(p12-3*p26-p16)/(-p16+p12)
     #/p26*B0_3+4*(p12-p16-p26)/p26*C0_3+1/p26)*c3
      s12 = s13+s14
      s10 = s11*s12
      s12 = 2*p24*p26*(-p15*p26**2+p26*p16*p25+p26*p56*p12+p26*p15*p12+p
     #25*p12*p16-p56*p12**2)+p26*p12*(-p26+p12)*e2645+p26**2*(-p26+p12)*
     #e1245+p25*p26*(-p26+p12)*e1264+p24*p26*(-p26+p12)*e1265
      s13 = (2/p26**2*B0_2-(3*p16*p26-2*p16*p12+2*p12**2+4*p26**2-6*p26*
     #p12)/p26**2/(-p26+p12)**2*B0_4-(-2*p26**2-3*p16*p26+2*p26*p12+2*p1
     #6*p12)/p26**2/(-p26+p12)**2*B0_1+2*p12*(p16+p26)/p26**3*C0_1-2*p16
     #*(p16+p26)/p26**3*C0_2-2*(p16+p26)*(-p26+p12)/p26**3*C0_6+2*(p16+p
     #26)**2/p26**3*C0_4+4*p16*p12*(p16+p26)/p26**3*D0_3+1/p26/(-p26+p12
     #))*c1+((-p16+2*p12-2*p26)/p26/(-p26+p12)**2*B0_4-(-p16+2*p12-2*p26
     #)/p26/(-p26+p12)**2*B0_1+1/p26/(-p26+p12))*c2
      s11 = s12*s13
      s9 = s10+s11
      s5 = s8+s9
      s8 = s5
      s10 = 2*p26*(-p14*p15*p26**2-p45*p16*p26*p12+p15*p46*p26*p12+p26*p
     #15*p14*p12+p25*p14*p16*p26-p15*p46*p12**2+p15*p24*p12*p16)-p16*p26
     #*(p12+p26)*e1245+p15*p26*(-p26+p12)*e1264+p14*p26*(-p26+p12)*e1265
     #+p12*p26*(-p26+p12)*e1645
      s12 = (1/p16/p26*B0_2-(p12**3-2*p12**2*p26-p12*p16**2-3*p12*p16*p2
     #6+p12*p26**2+2*p16**2*p26+2*p26**2*p16)/p26/p16/(-p26+p12)/(-p16+p
     #12)/p12*B0_4-(p12+2*p16)/p16/(-p16+p12)/p12*B0_3+(p12-2*p26)/p12/p
     #26/(-p26+p12)*B0_1-p12*(p16-p26)*(p16+p26)/p16**2/p26**2*C0_1+p16/
     #p26**2*C0_2-(-p16+p12)/p16**2*C0_3+(-p26+p12)/p26**2*C0_6-1/p16**2
     #*p26*C0_5-(p16+p26)**2*(p16-p26)/p16**2/p26**2*C0_4+2/p16**2*p26*p
     #12*D0_1-2*p16/p26**2*p12*D0_3)*c1
      s13 = (-(2*p12**2-2*p16*p12-6*p26*p12+3*p16*p26+3*p26**2)/p26/(-p2
     #6+p12)/(-p16+p12)/p12*B0_4-3/(-p16+p12)/p12*B0_3+(2*p12-3*p26)/p12
     #/p26/(-p26+p12)*B0_1+3*p16/p12**2*C0_2+3*(-p16+p12)/p12**2*C0_3+3*
     #(-p26+p12)/p12**2*C0_6+3*p26/p12**2*C0_5+6*p16*p26/p12**2*D0_2)*c2
      s11 = s12+s13
      s9 = s10*s11
      s7 = s8+s9
      s8 = s7
      s11 = -2*p16*(-p16**2*p24*p25-p45*p16*p26*p12+p25*p14*p16*p26+p16*
     #p25*p24*p12+p56*p24*p16*p12+p15*p24*p12*p26-p12**2*p24*p56)-p12*p1
     #6*(-p16+p12)*e2645-p16*p26*(p16+p12)*e1245-p25*p16*(-p16+p12)*e126
     #4-p24*p16*(-p16+p12)*e1265
      s13 = (-1/p16/p26*B0_2+(p12**3-2*p12**2*p16-p12*p26**2+p12*p16**2-
     #3*p12*p16*p26+2*p16**2*p26+2*p26**2*p16)/p12/p26/(-p26+p12)/(-p16+
     #p12)/p16*B0_4-(p12-2*p16)/p16/(-p16+p12)/p12*B0_3+(p12+2*p26)/p12/
     #p26/(-p26+p12)*B0_1-p12*(p16-p26)*(p16+p26)/p16**2/p26**2*C0_1+p16
     #/p26**2*C0_2-(-p16+p12)/p16**2*C0_3+(-p26+p12)/p26**2*C0_6-1/p16**
     #2*p26*C0_5-(p16+p26)**2*(p16-p26)/p16**2/p26**2*C0_4+2/p16**2*p26*
     #p12*D0_1-2*p16/p26**2*p12*D0_3)*c1
      s14 = ((2*p12**2-6*p16*p12-2*p26*p12+3*p16**2+3*p16*p26)/p12/(-p26
     #+p12)/(-p16+p12)/p16*B0_4-(2*p12-3*p16)/p16/(-p16+p12)/p12*B0_3+3/
     #p12/(-p26+p12)*B0_1-3*p16/p12**2*C0_2-3*(-p16+p12)/p12**2*C0_3-3*(
     #-p26+p12)/p12**2*C0_6-6*p16*p26/p12**2*D0_2-3*p26/p12**2*C0_5)*c2
      s12 = s13+s14
      s10 = s11*s12
      s12 = 2*p24*p26*(-p26*p15+p16*p25+2*p15*p12-p56*p12)-e1245*p26**2-
     #e1264*p26*p25-e2645*p12*p26-e1265*p26*p24
      s14 = (-1/p26*B0_2+(p12+2*p26)*(p12-p16-p26)/p12/p26/(-p26+p12)*B0
     #_4+(p12-2*p26)/p26/p12*B0_3+(p12+2*p26)*p16/p12/p26/(-p26+p12)*B0_
     #1-p12*(p16**2+p26**2)/p26**2/p16*C0_1+(2*p26+p16)*p16/p26**2*C0_2-
     #(-p26*p12+2*p16*p12-3*p16*p26-2*p16**2)/p16/p26*C0_3+(2*p26+p16)*(
     #-p26+p12)/p26**2*C0_6+(2*p16+p26)/p16*C0_5-(p16+p26)*(p26**2+p16**
     #2+4*p16*p26)/p26**2/p16*C0_4-2*p12*(2*p16+p26)/p16*D0_1-2*p16*p12*
     #(2*p26+p16)/p26**2*D0_3)*c1
      s15 = (3*(p12-p16-p26)/(-p26+p12)/p12*B0_4+(p12-3*p26)/p26/p12*B0_
     #3+3*p16/(-p26+p12)/p12*B0_1-p16*(2*p12**2+3*p16*p26)/p12**2/p26*C0
     #_2-(2*p12**3-4*p12**2*p26-2*p12**2*p16+3*p12*p16*p26-3*p16**2*p26)
     #/p12**2/p26*C0_3+(-p26+p12)*(2*p12**2-3*p16*p26)/p12**2/p26*C0_6-(
     #2*p12**2+3*p16*p26)/p12**2*C0_5+2*p16*(2*p12**2-3*p16*p26)/p12**2*
     #D0_2)*c2+(3*(p12-p16-p26)/(-p16+p12)/p26*B0_4-(p12-3*p26-p16)/(-p1
     #6+p12)/p26*B0_3+4*(p12-p16-p26)/p26*C0_3+1/p26)*c3
      s13 = s14+s15
      s11 = s12*s13
      s9 = s10+s11
      s6 = s8+s9
      s8 = s6
      s10 = -2*p15*p16*(-p24*p16**2+p16*p46*p12+p16*p26*p14+p16*p24*p12-
     #p46*p12**2+p14*p12*p26)+p16**2*(-p16+p12)*e1245-p15*p16*(-p16+p12)
     #*e1264-p14*p16*(-p16+p12)*e1265-p12*p16*(-p16+p12)*e1645
      s11 = (-2/p16**2*B0_2+(2*p12**2-6*p16*p12-2*p26*p12+4*p16**2+3*p16
     #*p26)/p16**2/(-p16+p12)**2*B0_4+(-3*p16*p26+2*p16*p12-2*p16**2+2*p
     #26*p12)/p16**2/(-p16+p12)**2*B0_3-2*p12*(p16+p26)/p16**3*C0_1+2*(p
     #16+p26)*(-p16+p12)/p16**3*C0_3+2*p26*(p16+p26)/p16**3*C0_5-2*(p16+
     #p26)**2/p16**3*C0_4-4*p26*p12*(p16+p26)/p16**3*D0_1-1/p16/(-p16+p1
     #2))*c1+(-(2*p12-p26-2*p16)/p16/(-p16+p12)**2*B0_4+(2*p12-p26-2*p16
     #)/p16/(-p16+p12)**2*B0_3-1/p16/(-p16+p12))*c2
      s9 = s10*s11
      s7 = s8+s9
      s9 = s7
      s11 = -2*p15*p24*p26**2+2*p25*p24*p16*p26+2*p16**2*p24*p25+2*p45*p
     #16*p26*p12-2*p25*p14*p16*p26+2*p56*p24*p26*p12-2*p56*p24*p16*p12+p
     #12*(p16-p26)*e2645-p26*(p16+p26)*e1245+p25*(p16-p26)*e1264+p24*(p1
     #6-p26)*e1265
      s13 = (-1/p26*B0_2+(p12*p16**2*p26+2*p16**2*p26**2+p16**2*p12**2+p
     #16*p12**2*p26-5*p16*p12*p26**2-2*p12**3*p16+2*p16*p26**3+p12**4-p1
     #2**2*p26**2)/p12/p26/(-p26+p12)**2/(-p16+p12)*B0_4-2*p16/(-p16+p12
     #)/p12*B0_3+p16*(p26*p12+2*p26**2+p12**2)/p26/(-p26+p12)**2/p12*B0_
     #1-p12*(p16+p26)**2/p26**2/p16*C0_1+(2*p26+p16)*p16/p26**2*C0_2+(-p
     #16+p12)/p16*C0_3+(p12+p26)*(2*p26*p12+p16*p12-3*p16*p26-2*p26**2)/
     #p26**2/(-p26+p12)*C0_6+1/p16*p26*C0_5-(p16+p26)**3/p26**2/p16*C0_4
     #-2/p16*p26*p12*D0_1-2*p16*p12*(2*p26+p16)/p26**2*D0_3)*c1
      s14 = ((3*p16**2*p26+p12*p16**2+3*p26**2*p16-7*p12*p16*p26-p12*p26
     #**2+p12**3)/(-p26+p12)**2/(-p16+p12)/p12*B0_4+(p12-3*p16)/(-p16+p1
     #2)/p12*B0_3+p16*(3*p26+p12)/p12/(-p26+p12)**2*B0_1+3*p16**2/p12**2
     #*C0_2+3*(-p16+p12)*p16/p12**2*C0_3+(-6*p12*p16*p26+3*p26**2*p16-p1
     #2**2*p16-4*p12**2*p26+4*p12**3)/p12**2/(-p26+p12)*C0_6+3*p16*p26/p
     #12**2*C0_5+6*p16**2*p26/p12**2*D0_2)*c2+(-(5*p16**2-9*p16*p12+4*p1
     #6*p26+5*p12**2+p26**2-6*p26*p12)/(-p26+p12)**2/(-p16+p12)*B0_4+1/(
     #-p16+p12)*B0_3+(-5*p16-2*p26+2*p12)/(-p26+p12)**2*B0_1-4*(p12-p16-
     #p26)/(-p26+p12)*C0_6-1/(-p26+p12))*c3
      s12 = s13+s14
      s10 = s11*s12
      s8 = s9+s10
      s9 = s8
      s12 = -2*p16*(-p25*p46*p16**2-p45*p16*p26*p12+p46*p56*p16*p12+p15*
     #p46*p16*p26+p25*p46*p12*p16-p56*p46*p12**2+p26*p14*p12*p56)-p16**2
     #*(-p16+p12)*e2645-p56*p16*(-p16+p12)*e1264-p46*p16*(-p16+p12)*e126
     #5-p16*p26*(p16+p12)*e1645
      s13 = (2*(p26*p12-p16*p26+2*p16*p12-p16**2)/p16**2/(p16+p26)**2*B0
     #_2-(2*p12**2*p26+4*p12**2*p16-2*p12*p26**2-8*p12*p16**2-8*p12*p16*
     #p26+4*p16**2*p26+p26**2*p16+3*p16**3)/p16**2/(p16+p26)**2/(-p16+p1
     #2)*B0_4-(2*p12-p16)/(-p16+p12)/p16**2*B0_3+2*p12**2/p16**3*C0_1-2*
     #(-p16+p12)*p12/p16**3*C0_3-2*p12*p26/p16**3*C0_5+2*p12*(p16+p26)/p
     #16**3*C0_4+4*p12**2*p26/p16**3*D0_1+2/p16/(p16+p26))*c1+(1/p16/(-p
     #16+p12)*B0_4-1/p16/(-p16+p12)*B0_3)*c2
      s11 = s12*s13
      s13 = 4*p24*p16*(-p16*p25-2*p26*p56+p26*p15+p56*p12)-2*p16*p26*e12
     #45-2*p16*e1265*p24-2*p16*e1264*p25-2*e2645*p16*p12
      s15 = (-1/p26*B0_3/2-1/p16*B0_1/2-p12*(p16+p26)/p16/p26*C0_1-C0_2+
     #(-2*p26+p12-p16)/p26*C0_3+(-p26-2*p16+p12)/p16*C0_6-C0_5+(p16+p26)
     #**2/p16/p26*C0_4+2*p12*D0_1+2*p12*D0_3-(p16+p26)/p16/p26/2)*c1
      s17 = (-1/p26*B0_3/2-1/p16*B0_1/2+(p16*p12+p26*p12+3*p16*p26)/p26/
     #p12*C0_2+(p12**2*p16-p12**2*p26+2*p12*p16*p26-p12*p16**2-3*p16**2*
     #p26)/p12/p16/p26*C0_3-(p12**2*p16-p12**2*p26-2*p12*p16*p26+p12*p26
     #**2+3*p26**2*p16)/p12/p16/p26*C0_6+(p16*p12+p26*p12+3*p16*p26)/p16
     #/p12*C0_5-2*(-3*p16*p26+p26*p12+p16*p12)/p12*D0_2+(p16+p26)/p16/p2
     #6/2)*c2
      s18 = (-3.D0/2.D0*(p12-p16-p26)*(p16*p12-2*p16*p26+p26*p12)/p26/p1
     #6/(-p26+p12)/(-p16+p12)*B0_4+(p12-3*p26-p16)/(-p16+p12)/p26*B0_3/2
     #+(p12-3*p16-p26)/(-p26+p12)/p16*B0_1/2-2*(p12-p16-p26)/p26*C0_3-2*
     #(p12-p16-p26)/p16*C0_6-(p16+p26)/p16/p26/2)*c3
      s16 = s17+s18
      s14 = s15+s16
      s12 = s13*s14
      s10 = s11+s12
      s4 = s9+s10
      s5 = 1/p16
      s3 = s4*s5
      s1 = s2*s3
      s2 = 1/p26/((q2-ph_Wmass2)**2+ph_WmWw**2)/((qp2-ph_Wmass2)**2+ph_W
     #mWw**2)
      amp_massless = s1*s2
      end

c     This subroutine computes mass-dependent part of the analytical amplitude
c     for the interference of the Born amplitude with diagrams containing
c     massive quark loops ==> it will be multiplied by the outcome of 
c     subroutine virt_amp_massive_quarks
      subroutine loop_coefficient(p,coef,m)
      implicit none
      include 'nlegborn.h'
      real * 8 p(0:3,nlegborn),m
      complex * 16 coef
      real * 8 p3(0:3),p6(0:3),k(0:3),k2,p36
      real * 8 dotp
      external dotp
      complex * 16 B0_FG_mass,C0_FG_mass
      external B0_FG_mass,C0_FG_mass

      p3 = p(:,3)
      p6 = p(:,6)
      k=p(:,3)+p(:,6)

      p36=dotp(p3,p6)
      k2=dotp(k,k)

      coef = -4*m*(2*C0_FG_mass(p3+p6,-p3,m)*p36**2+2*p36+4*p36*m**2*C0_
     #FG_mass(p3+p6,-p3,m)-k2*B0_FG_mass(-p3,m)+k2*B0_FG_mass(-p3-p6,m))
     #/p36**2

      end

c     This subroutine computes mass-independent part of the analytical
c     amplitude for the interference of the Born amplitude with diagrams 
c     containing massive quark loops ==> it will be multiplied by the 
c     outcome of subroutine loop_coefficient
      subroutine virt_amp_massive_quarks(p,amp_massive)
c     returns the interference of virtual and real amplitudes (NOT 2REAL(V B*),
c     only V B*) multiplied by the intermediate propagators
      implicit none
      include 'nlegborn.h'
      include 'PhysPars.h'
      include 'pwhg_math.h'
      real * 8 p(0:3,nlegborn)
      complex * 16 amp_massive
      real * 8 p1(0:3),p2(0:3),p3(0:3),p4(0:3),p5(0:3),p6(0:3),k(0:3)
      real * 8 p12,p13,p14,p16,p23,p24,p26,p46,p33,p34,p36,p15,p25,
     $     p35,p45,p56,k2,den1,den2
      complex * 16 s1,s2,s3,s4,s5,s6,s7,s8,e1234,e1236,e1264,e1364,e2364
      real * 8 dotp,epsilon
      external dotp,epsilon

      p1 = p(:,1)
      p2 = p(:,2)
      p3 = p(:,3)
      p4 = p(:,4)
      p5 = p(:,5)
      p6 = p(:,6)
      k=p3+p6

      p12=dotp(p1,p2)
      p13=dotp(p1,p3)
      p14=dotp(p1,p4)
      p15=dotp(p1,p5)
      p16=dotp(p1,p6)
      p23=dotp(p2,p3)
      p24=dotp(p2,p4)
      p25=dotp(p2,p5)
      p26=dotp(p2,p6)
      p33=dotp(p3,p3)
      p34=dotp(p3,p4)
      p35=dotp(p3,p5)
      p36=dotp(p3,p6)
      p45=dotp(p4,p5)
      p46=dotp(p4,p6)
      p56=dotp(p5,p6)
      k2=dotp(k,k)

      e1234 = cmplx(0d0,1d0)*epsilon(p1,p2,p3,p4)
      e1236 = cmplx(0d0,1d0)*epsilon(p1,p2,p3,p6)
      e1264 = cmplx(0d0,1d0)*epsilon(p1,p2,p6,p4)
      e1364 = cmplx(0d0,1d0)*epsilon(p1,p3,p6,p4)
      e2364 = cmplx(0d0,1d0)*epsilon(p2,p3,p6,p4)

      den1=-2*p13-2*p16+p33+2*p36
      den2=p33-2*p23+2*p36-2*p26

      s3 = 128*((2*p46*p35*p36-2*p36*p24*p35+4*p36*p24*p15-p56*p46*p33-2
     #*p36*p46*p15-2*p36*p24*p56)/p26*p12+(-2*p34*p15+2*p34*p35-p45*p33+
     #2*p24*p35+(-4*p23*p24*p15+2*p23*p46*p15+p33*p46*p25-2*p23*p46*p35+
     #2*p24*p25*p36+2*p24*p35*p23)/p26)*p16-2*p13*p34*p56+4*p36*p24*p56-
     #4*p36*p24*p15+2*p45*p36*p13-2*p24*p35*p13-2*p36*p14*p35-2*p13*p24*
     #p56+p33*p14*p56+4*p13*p24*p15+2*p33*p24*p56+2*p15*p14*p36-2*p13*(-
     #p46+p24)*(-p25*p36+p23*p56)/p26+2*p13*p24*(p13*p56-p15*p36)/p16)/d
     #en1
      s5 = 128*((-2*p36*p46*p15-2*p36*p24*p56+4*p36*p24*p15-2*p36*p34*p1
     #5+2*p34*p56*p36-p56*p46*p33)/p16*p12+(2*p34*p35-p45*p33-2*p24*p35+
     #2*p34*p15)*p26-4*p36*p24*p15+2*p23*p45*p36+4*p36*p46*p15+2*p24*p25
     #*p36+4*p23*p24*p15+p33*p46*p25-2*p36*p34*p25-2*p23*p34*p15-2*p23*p
     #46*p35+2*p33*p46*p15-2*p23*p46*p15+2*p23*p15*(p46*p23-p24*p36)/p26
     #+((p33*p14*p56+2*p15*p14*p36-2*p13*p34*p56+2*p34*p15*p13+2*p13*p24
     #*p56-4*p13*p24*p15)*p26-2*p23*(-p56+p15)*(-p14*p36+p13*p46))/p16)/
     #den2
      s6 = 64*((-p24+p14+2*p45)/p26/den1*p16+(-p24+p14-p34-2*p46-2*p45)/
     #den1+(p24*p23-p24*p56-p14*p36-p24*p35-p34*p25-p14*p56-p46*p23-p46*
     #p25-2*p45*p36+2*p45*p23+p24*p36-p14*p23-p46*p15+p12*p34+2*p12*p46)
     #/den1/p26+p13*(-2*p45+p14-p34-p24-p46)/den1/p16+(-2*p45-p14+p24-p4
     #6+(-p36*p46-2*p45*p23-2*p45*p36+p14*p36+p24*p36-p46*p23+p24*p23-p3
     #6*p34-p14*p23-p34*p23)/p26+((p24+2*p45-p14+p46)*p26+p14*p36-p13*p2
     #4+2*p45*p13-2*p45*p36+p13*p34-p24*p36+p46*p23+p13*p14)/p16)/den2)*
     #e1236
      s4 = s5+s6
      s2 = s3+s4
      s3 = s2+64*(2/p26/den1*p16**2+(-2*p12-2*p36+2*p13-p15-p34+2*p23+p3
     #5-p33+p14)/den1/p26*p16+(p14-2*p13+2*p12-p15)/den1+(p13*p46+p15*p2
     #3-p15*p36-p14*p23-p13*p56+p14*p36+p12*p46+p12*p34-p12*p56-2*p12*p2
     #3-p12*p35)/den1/p26+p13*(2*p12-p15+p14)/den1/p16+((-2-2/p26*p23)*p
     #16+2*p12-p14+p34+p33+p15-2*p23-p35+(2*p12*p23-2*p13*p23+p14*p36-p1
     #4*p23+p15*p23-p15*p36)/p26+((-2*p12+2*p13-p14+p15)*p26+2*p12*p36-2
     #*p12*p13-p15*p36+p13*p14-2*p13*p36+2*p13**2-p13*p46+p14*p36-p13*p1
     #5+p13*p56)/p16)/den2)*e2364
      s4 = s3+64*((-2*p12+2*p23+p24-p25)/den1/p26*p16-2/den1*p26+(2*p12+
     #p35-p34+p33-2*p13+p24-p25)/den1+(p12*p56+2*p12*p36-2*p12*p23-p12*p
     #46+p25*p23-p24*p23+2*p23**2+p46*p23-p23*p56-2*p36*p23-p24*p36+p25*
     #p36)/den1/p26+(-2*p13/den1*p26+p13*(2*p12+p24-2*p23-p25)/den1)/p16
     #+(2*p12-p24+p25-2*p23+(2*p12*p23-p24*p23-p24*p36+p25*p23+p25*p36)/
     #p26+(2*p26**2+(2*p23-p33+p34-p35+p25+2*p13-2*p36-p24-2*p12)*p26-2*
     #p12*p13-p13*p25+p23*p56-p24*p36-p46*p23+p25*p36+p13*p24)/p16)/den2
     #)*e1364
      s5 = s4
      s7 = 64*((p35+2*p36-p34-p33+2*p13)/p26/den1*p16+(p34+2*p36-p33+2*p
     #23-p35)/den1+(4*p36*p23-p13*p56+p46*p23-2*p15*p36-2*p24*p36+p13*p4
     #6-2*p36**2-2*p23**2+2*p14*p36-p23*p56+2*p25*p36-4*p12*p36)/den1/p2
     #6+p13*(-p35+2*p23+p34)/den1/p16+(p34-2*p36-p35+p33-2*p13+(-p35*p23
     #-2*p13*p23+p34*p23+p36*p34-p36*p35)/p26+(4*p12*p36+(-p34-2*p23+p35
     #+p33-2*p36)*p26-4*p13*p36+2*p36**2-2*p14*p36+2*p15*p36-2*p25*p36+2
     #*p13**2+2*p24*p36-p13*p34+p13*p35)/p16)/den2)*e1264
      s8 = 64*(-2/p26/den1*p16**2+4*p36/p26/den1*p16-2/den1*p26+(2*p23-p
     #34+p35+2*p56-2*p46+2*p36)/den1+(-2*p12*p36-2*p24*p36-2*p36**2-p23*
     #p56+2*p36*p23+2*p25*p36+p46*p23)/den1/p26+(-2*p13/den1*p26-p13*(p4
     #6-p56)/den1)/p16+((2+2/p26*p23)*p16-2*p36+p56-2*p13-p46-(p46-p56)*
     #(p23+p36)/p26+(2*p12*p36+2*p26**2+(-p56-4*p36+p46)*p26-2*p14*p36+2
     #*p36**2+p13*p46-2*p13*p36+2*p15*p36-p13*p56)/p16)/den2)*e1234
      s6 = s7+s8
      s1 = s5+s6
      s2 = 1/k2/((2*p45-ph_Wmass2)**2+ph_WmWw**2)/(-2*p26+2*p12-2*p16-ph
     #_Wmass2+cmplx(0.D0,-1.D0)*ph_WmWw)
      amp_massive = s1*s2
      end

      function epsilon(a,b,c,d)
      implicit none
      real *8 a(4),b(4),c(4),d(4),ris
      integer i,j,k,l
      real *8 mat(4,4),epsilon
      real*8 getdet
      external getdet
      do i=1,4
         mat(1,i) = a(i)
         mat(2,i) = b(i)
         mat(3,i) = c(i)
         mat(4,i) = d(i)      
      enddo
      epsilon = -getdet(mat,4)
      end


      real *8 function getdet(a,n)
      implicit real *8 (a-h,o-z)
      real *8 elem(n,n),a(n,n)
      real *8 m,temp
      integer i,j,k,l
      logical detexists
      do i=1,n
         do j=1,n
            elem(i,j) = a(i,j)
         enddo
      enddo
      detexists = .TRUE.
      l=1
      do k=1,n-1
         if (dabs(elem(k,k)).le.1.0d-20) then
            detexists = .FALSE.
            do i=k+1,n
               if (elem(i,k).ne.0.0) then
                  do j=1,n
                     temp = elem(i,j)
                     elem(i,j) = elem(k,j)
                     elem(k,j) = temp
                  enddo
                  detexists = .TRUE.
                  l=-l
                  exit
               endif
            enddo
            if (detexists.eqv..FALSE.) then
               getdet = 0
               return
            endif
         endif
         do j=k+1,n
            m=elem(j,k)/elem(k,k)
            do i=k+1,n
               elem(j,i) = elem(j,i) - m*elem(k,i)
            enddo
         enddo
      enddo
      getdet = l
      do i=1,n
         getdet = getdet*elem(i,i)
      enddo
      end
